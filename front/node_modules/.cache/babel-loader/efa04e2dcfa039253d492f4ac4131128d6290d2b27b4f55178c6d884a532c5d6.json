{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst useDBMovieData = id => {\n  _s();\n  const [dbData, setDbData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const getDbMovie = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const response = await fetch(`http://192.168.56.1:8080/movie/${id}`, {\n          method: 'GET'\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch movie data');\n        }\n        const data = await response.json();\n        setDbData(data);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getDbMovie();\n  }, [id]); // id가 변할 때마다 호출\n\n  return {\n    dbData,\n    loading,\n    error\n  };\n};\n_s(useDBMovieData, \"0cbDrxWHttLXlywTfNwL5kbdAhY=\");\nexport default useDBMovieData;","map":{"version":3,"names":["useState","useEffect","useDBMovieData","id","_s","dbData","setDbData","loading","setLoading","error","setError","getDbMovie","response","fetch","method","ok","Error","data","json","err","message"],"sources":["C:/Users/Samsung/Desktop/stellanex_graduation/src/Component/UseDBMovieData.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useDBMovieData = (id) => {\r\n    const [dbData, setDbData] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const getDbMovie = async () => {\r\n            setLoading(true);\r\n            setError(null);\r\n\r\n            try {\r\n                const response = await fetch(`http://192.168.56.1:8080/movie/${id}`, {\r\n                    method: 'GET',\r\n                });\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch movie data');\r\n                }\r\n                const data = await response.json();\r\n                setDbData(data);\r\n            } catch (err) {\r\n                setError(err.message);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        getDbMovie();\r\n    }, [id]); // id가 변할 때마다 호출\r\n\r\n    return { dbData, loading, error };\r\n};\r\n\r\nexport default useDBMovieData;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,cAAc,GAAIC,EAAE,IAAK;EAAAC,EAAA;EAC3B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACZ,MAAMU,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC3BH,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MAEd,IAAI;QACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAE,kCAAiCV,EAAG,EAAC,EAAE;UACjEW,MAAM,EAAE;QACZ,CAAC,CAAC;QACF,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;QACjD;QACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QAClCZ,SAAS,CAACW,IAAI,CAAC;MACnB,CAAC,CAAC,OAAOE,GAAG,EAAE;QACVT,QAAQ,CAACS,GAAG,CAACC,OAAO,CAAC;MACzB,CAAC,SAAS;QACNZ,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IAEDG,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,CAACR,EAAE,CAAC,CAAC,CAAC,CAAC;;EAEV,OAAO;IAAEE,MAAM;IAAEE,OAAO;IAAEE;EAAM,CAAC;AACrC,CAAC;AAACL,EAAA,CA9BIF,cAAc;AAgCpB,eAAeA,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}