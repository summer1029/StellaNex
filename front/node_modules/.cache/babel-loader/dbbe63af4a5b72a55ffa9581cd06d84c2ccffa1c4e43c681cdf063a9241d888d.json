{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\Desktop\\\\stellanex_graduation\\\\src\\\\Component\\\\Register.js\",\n  _s = $RefreshSig$();\n// import React from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import RegisterForm from './RegisterForm';\n\n// export default function Register() {\n//   const navigate = useNavigate();\n\n//   const handleSubmit = async (name, email, password, birth) => {\n//     try {\n\n//       if (name.trim() === \"\" || email.trim() === \"\" || password.trim() === \"\" || birth.trim() === \"\") {\n//         alert(\"Email address, password, name and birth cannot be empty!\")\n//         return\n//       }\n\n//       const response = await fetch(\"http://192.168.56.1:8080/member/join\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({\n//           name: name,\n//           email: email,\n//           password: password,\n//           birth: birth\n//         }),\n//       });\n//       // json 형식이 아님\n//       const data = await response.json();\n//       console.log(\"res 결과\", response)\n//       console.log(\"데이터 결과\", data)\n\n//       if (data.status === 200) {\n//         navigate(\"/Login\"); // 회원가입 성공 시 로그인 페이지로 이동합니다.\n//       } else {\n//         console.error(\"회원가입 실패:\", data.error);\n//       }\n//     } catch (error) {\n//       console.log(error)\n//       console.error('에러 발생:', error);\n//       throw error; // 에러를 다시 던져서 상위 컴포넌트에서 처리할 수 있도록 합니다.\n//     }\n//   }\n\n//   return <RegisterForm onSubmit={handleSubmit} />;\n// }\n\n// // import React from 'react'\n// // import RegisterForm from './RegisterForm'\n\n// // export default function Register() {\n\n// //   const handleSubmit = (name, email, password, birth) => {\n\n// //     if (name.trim() == \"\" || email.trim() == \"\" || password.trim() == \"\" || birth.trim() == \"\") {\n// //       alert(\"Email address, password, name and birth cannot be empty!\")\n// //       return\n// //     }\n\n// //     fetch(\"http://10.125.121.181:8080/member/join\", {\n// //       method : \"POST\", \n// //       headers: {\n// //         \"Content-Type\": \"application/json\",\n// //       },\n// //       body : JSON.stringify({\n// //         name : name,\n// //         email : email,\n// //         password : password,\n// //         birth : birth\n// //       }),\n// //     })\n// //     .then(res => {\n// //       console.log(res)\n// //       res.json()})\n// //     .catch(err => console.log('에러 발생:', err))\n// //   }\n\n// //   return (\n// //     <RegisterForm onSubmit={handleSubmit} />\n// //   )\n// // }\n\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport RegisterForm from './RegisterForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Register() {\n  _s();\n  const navigate = useNavigate();\n  const handleSubmit = async (name, email, password, birth) => {\n    try {\n      if (name.trim() === \"\" || email.trim() === \"\" || password.trim() === \"\" || birth.trim() === \"\") {\n        alert(\"Email address, password, name and birth cannot be empty!\");\n        return;\n      }\n      const response = await fetch(\"http://192.168.56.1:8080/member/join\", {\n        method: \"POST\",\n        // headers: {\n        //   \"Content-Type\": \"application/json\",\n        // },\n        body: JSON.stringify({\n          name,\n          email,\n          password,\n          birth\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      // 응답의 Content-Type이 application/json인지 확인\n      const contentType = response.headers.get(\"Content-Type\");\n      if (contentType && contentType.includes(\"application/json\")) {\n        const data = await response.json();\n        console.log(\"데이터 결과\", data);\n        if (data.status === 200) {\n          navigate(\"/Login\"); // 회원가입 성공 시 로그인 페이지로 이동합니다.\n        } else {\n          console.error(\"회원가입 실패:\", data.error);\n        }\n      } else {\n        throw new Error(\"서버 응답이 JSON 형식이 아닙니다.\");\n      }\n    } catch (error) {\n      console.error('에러 발생:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(RegisterForm, {\n    onSubmit: handleSubmit\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 10\n  }, this);\n}\n_s(Register, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c = Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useNavigate","RegisterForm","jsxDEV","_jsxDEV","Register","_s","navigate","handleSubmit","name","email","password","birth","trim","alert","response","fetch","method","body","JSON","stringify","ok","Error","status","contentType","headers","get","includes","data","json","console","log","error","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Samsung/Desktop/stellanex_graduation/src/Component/Register.js"],"sourcesContent":["// import React from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import RegisterForm from './RegisterForm';\r\n\r\n// export default function Register() {\r\n//   const navigate = useNavigate();\r\n\r\n//   const handleSubmit = async (name, email, password, birth) => {\r\n//     try {\r\n\r\n//       if (name.trim() === \"\" || email.trim() === \"\" || password.trim() === \"\" || birth.trim() === \"\") {\r\n//         alert(\"Email address, password, name and birth cannot be empty!\")\r\n//         return\r\n//       }\r\n\r\n//       const response = await fetch(\"http://192.168.56.1:8080/member/join\", {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\",\r\n//         },\r\n//         body: JSON.stringify({\r\n//           name: name,\r\n//           email: email,\r\n//           password: password,\r\n//           birth: birth\r\n//         }),\r\n//       });\r\n//       // json 형식이 아님\r\n//       const data = await response.json();\r\n//       console.log(\"res 결과\", response)\r\n//       console.log(\"데이터 결과\", data)\r\n\r\n//       if (data.status === 200) {\r\n//         navigate(\"/Login\"); // 회원가입 성공 시 로그인 페이지로 이동합니다.\r\n//       } else {\r\n//         console.error(\"회원가입 실패:\", data.error);\r\n//       }\r\n//     } catch (error) {\r\n//       console.log(error)\r\n//       console.error('에러 발생:', error);\r\n//       throw error; // 에러를 다시 던져서 상위 컴포넌트에서 처리할 수 있도록 합니다.\r\n//     }\r\n//   }\r\n\r\n//   return <RegisterForm onSubmit={handleSubmit} />;\r\n// }\r\n\r\n// // import React from 'react'\r\n// // import RegisterForm from './RegisterForm'\r\n\r\n// // export default function Register() {\r\n\r\n// //   const handleSubmit = (name, email, password, birth) => {\r\n\r\n// //     if (name.trim() == \"\" || email.trim() == \"\" || password.trim() == \"\" || birth.trim() == \"\") {\r\n// //       alert(\"Email address, password, name and birth cannot be empty!\")\r\n// //       return\r\n// //     }\r\n\r\n// //     fetch(\"http://10.125.121.181:8080/member/join\", {\r\n// //       method : \"POST\", \r\n// //       headers: {\r\n// //         \"Content-Type\": \"application/json\",\r\n// //       },\r\n// //       body : JSON.stringify({\r\n// //         name : name,\r\n// //         email : email,\r\n// //         password : password,\r\n// //         birth : birth\r\n// //       }),\r\n// //     })\r\n// //     .then(res => {\r\n// //       console.log(res)\r\n// //       res.json()})\r\n// //     .catch(err => console.log('에러 발생:', err))\r\n// //   }\r\n\r\n// //   return (\r\n// //     <RegisterForm onSubmit={handleSubmit} />\r\n// //   )\r\n// // }\r\n\r\nimport React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport RegisterForm from './RegisterForm';\r\n\r\nexport default function Register() {\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = async (name, email, password, birth) => {\r\n    try {\r\n      if (name.trim() === \"\" || email.trim() === \"\" || password.trim() === \"\" || birth.trim() === \"\") {\r\n        alert(\"Email address, password, name and birth cannot be empty!\");\r\n        return;\r\n      }\r\n\r\n      const response = await fetch(\"http://192.168.56.1:8080/member/join\", {\r\n        method: \"POST\",\r\n        // headers: {\r\n        //   \"Content-Type\": \"application/json\",\r\n        // },\r\n        body: JSON.stringify({ name, email, password, birth }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      // 응답의 Content-Type이 application/json인지 확인\r\n      const contentType = response.headers.get(\"Content-Type\");\r\n      if (contentType && contentType.includes(\"application/json\")) {\r\n        const data = await response.json();\r\n        console.log(\"데이터 결과\", data);\r\n\r\n        if (data.status === 200) {\r\n          navigate(\"/Login\"); // 회원가입 성공 시 로그인 페이지로 이동합니다.\r\n        } else {\r\n          console.error(\"회원가입 실패:\", data.error);\r\n        }\r\n      } else {\r\n        throw new Error(\"서버 응답이 JSON 형식이 아닙니다.\");\r\n      }\r\n    } catch (error) {\r\n      console.error('에러 발생:', error);\r\n    }\r\n  };\r\n\r\n  return <RegisterForm onSubmit={handleSubmit} />;\r\n}\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,eAAe,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAE9B,MAAMO,YAAY,GAAG,MAAAA,CAAOC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,KAAK,KAAK;IAC3D,IAAI;MACF,IAAIH,IAAI,CAACI,IAAI,CAAC,CAAC,KAAK,EAAE,IAAIH,KAAK,CAACG,IAAI,CAAC,CAAC,KAAK,EAAE,IAAIF,QAAQ,CAACE,IAAI,CAAC,CAAC,KAAK,EAAE,IAAID,KAAK,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QAC9FC,KAAK,CAAC,0DAA0D,CAAC;QACjE;MACF;MAEA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsC,EAAE;QACnEC,MAAM,EAAE,MAAM;QACd;QACA;QACA;QACAC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEX,IAAI;UAAEC,KAAK;UAAEC,QAAQ;UAAEC;QAAM,CAAC;MACvD,CAAC,CAAC;MAEF,IAAI,CAACG,QAAQ,CAACM,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBP,QAAQ,CAACQ,MAAO,EAAC,CAAC;MAC3D;;MAEA;MACA,MAAMC,WAAW,GAAGT,QAAQ,CAACU,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MACxD,IAAIF,WAAW,IAAIA,WAAW,CAACG,QAAQ,CAAC,kBAAkB,CAAC,EAAE;QAC3D,MAAMC,IAAI,GAAG,MAAMb,QAAQ,CAACc,IAAI,CAAC,CAAC;QAClCC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEH,IAAI,CAAC;QAE3B,IAAIA,IAAI,CAACL,MAAM,KAAK,GAAG,EAAE;UACvBhB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;QACtB,CAAC,MAAM;UACLuB,OAAO,CAACE,KAAK,CAAC,UAAU,EAAEJ,IAAI,CAACI,KAAK,CAAC;QACvC;MACF,CAAC,MAAM;QACL,MAAM,IAAIV,KAAK,CAAC,uBAAuB,CAAC;MAC1C;IACF,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC;EACF,CAAC;EAED,oBAAO5B,OAAA,CAACF,YAAY;IAAC+B,QAAQ,EAAEzB;EAAa;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACjD;AAAC/B,EAAA,CA1CuBD,QAAQ;EAAA,QACbJ,WAAW;AAAA;AAAAqC,EAAA,GADNjC,QAAQ;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}