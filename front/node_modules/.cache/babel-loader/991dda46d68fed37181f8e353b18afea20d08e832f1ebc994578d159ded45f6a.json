{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\Desktop\\\\stellanex_graduation\\\\src\\\\Component\\\\LikeDislikeFunc.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n\n// function LikeDislikeFunc({reviewId}) {\n//     const [like, setLike] = useState(0);\n//     const [dislike, setDislike] = useState(0);\n//     const [isLiked, setIsLiked] = useState(false);\n//     const [isDisliked, setIsDisliked] = useState(false);\n\n//     const updateLike = (value) => {\n\n//         console.log(\"loveValue: \", value)\n\n//         fetch(`http://192.168.56.1:8080/movie/love/${reviewId}`, {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json'\n//             },\n//             body: JSON.stringify({\n//                 love: value\n//             })\n//         })\n//         .then((res) => {\n//             // 응답 상태가 성공적이면 JSON으로 파싱\n//             if (!res.ok) {\n//                 throw new Error('Network response was not ok');\n//             }\n//             return res.json();\n//         })\n//         .then((data) => {\n//             console.log(\"서버 응답:\", data); // 서버의 응답 내용 확인\n//             // 필요한 로직 추가\n//             setLike(data.love); // 업데이트된 좋아요 수로 상태 업데이트\n//         })\n//         .catch((err) => console.error(err));\n//     }\n\n//     const updateDislike = (value) => {\n\n//         console.log(\"hateValue: \", value)\n\n//         fetch(`http://192.168.56.1:8080/movie/hate/${reviewId}`, {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json'\n//             },\n//             body: JSON.stringify({\n//                 hate: value\n//             })\n//         })\n//         .then((res) => {\n//             // 응답 상태가 성공적이면 JSON으로 파싱\n//             if (!res.ok) {\n//                 throw new Error('Network response was not ok');\n//             }\n//             return res.json();\n//         })\n//         .then((data) => {\n//             console.log(\"서버 응답:\", data); // 서버의 응답 내용 확인\n//             // 필요한 로직 추가\n//             setDislike(data.hate); // 업데이트된 좋아요 수로 상태 업데이트\n//         })\n//         .catch((err) => console.error(err));\n//     }\n\n//     // 좋아요 버튼 클릭 처리 함수\n//     const handleLike = () => {\n//         if (isLiked) {\n//             setLike(like - 1); // 좋아요 취소\n//             updateLike(-1) // 좋아요 취소 전송\n//             setIsLiked(false);\n//         } else {\n//             setLike(like + 1); // 좋아요\n//             updateLike(1) // 좋아요 전송\n//             setIsLiked(true);\n//             if (isDisliked) {\n//                 setDislike(dislike - 1); // 싫어요 취소\n//                 updateDislike(-1) // 싫어요 취소 전송\n//                 setIsDisliked(false);\n//             }\n//         }\n//     };\n\n//     // 싫어요 버튼 클릭 처리 함수\n//     const handleDislike = () => {\n//         if (isDisliked) {\n//             setDislike(dislike - 1); // 싫어요 취소\n//             updateDislike(-1) // 싫어요 취소 전송\n//             setIsDisliked(false);\n//         } else {\n//             setDislike(dislike + 1); // 싫어요\n//             updateDislike(1) // 싫어요 전송\n//             setIsDisliked(true);\n//             if (isLiked) {\n//                 setLike(like - 1); // 좋아요 취소\n//                 updateLike(-1) // 좋아요 취소 전송\n//                 setIsLiked(false);\n//             }\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <button onClick={handleLike} className='text-white mr-2'>\n//                 👍 좋아요 {like}\n//             </button>\n//             <button onClick={handleDislike} className='text-white'>\n//                 👎 싫어요 {dislike}\n//             </button>\n//         </div>\n//     );\n// }\n\n// export default LikeDislikeFunc;\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LikeDislikeFunc({\n  reviewId\n}) {\n  _s();\n  const [like, setLike] = useState(0);\n  const [dislike, setDislike] = useState(0);\n  const [isLiked, setIsLiked] = useState(false);\n  const [isDisliked, setIsDisliked] = useState(false);\n  useEffect(() => {\n    // 컴포넌트가 마운트될 때 좋아요 및 싫어요 수 가져오기\n    const fetchLikesAndDislikes = async () => {\n      try {\n        const response = await fetch(`http://192.168.56.1:8080/movie/review/${reviewId}`);\n        if (!response.ok) throw new Error('Network response was not ok');\n        const data = await response.json();\n        setLike(data.love);\n        setDislike(data.hate);\n      } catch (error) {\n        console.error(\"Error fetching likes and dislikes:\", error);\n      }\n    };\n    fetchLikesAndDislikes();\n  }, [reviewId]);\n  const updateLike = async value => {\n    try {\n      const response = await fetch(`http://192.168.56.1:8080/movie/love/${reviewId}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          love: value\n        })\n      });\n      if (!response.ok) throw new Error('Network response was not ok');\n      const data = await response.json();\n      setLike(data.love); // 서버 응답에 따른 업데이트\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const updateDislike = async value => {\n    try {\n      const response = await fetch(`http://192.168.56.1:8080/movie/hate/${reviewId}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          hate: value\n        })\n      });\n      if (!response.ok) throw new Error('Network response was not ok');\n      const data = await response.json();\n      setDislike(data.hate); // 서버 응답에 따른 업데이트\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const handleLike = () => {\n    if (isLiked) {\n      updateLike(-1); // 좋아요 취소 전송\n      setIsLiked(false);\n    } else {\n      updateLike(1); // 좋아요 전송\n      setIsLiked(true);\n      if (isDisliked) {\n        updateDislike(-1); // 싫어요 취소 전송\n        setIsDisliked(false);\n      }\n    }\n  };\n  const handleDislike = () => {\n    if (isDisliked) {\n      updateDislike(-1); // 싫어요 취소 전송\n      setIsDisliked(false);\n    } else {\n      updateDislike(1); // 싫어요 전송\n      setIsDisliked(true);\n      if (isLiked) {\n        updateLike(-1); // 좋아요 취소 전송\n        setIsLiked(false);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLike,\n      className: \"text-white mr-2\",\n      children: [\"\\uD83D\\uDC4D \\uC88B\\uC544\\uC694 \", like]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDislike,\n      className: \"text-white\",\n      children: [\"\\uD83D\\uDC4E \\uC2EB\\uC5B4\\uC694 \", dislike]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 9\n  }, this);\n}\n_s(LikeDislikeFunc, \"ucOMJwhLKd6IkWesfW+X6/4k534=\");\n_c = LikeDislikeFunc;\nexport default LikeDislikeFunc;\nvar _c;\n$RefreshReg$(_c, \"LikeDislikeFunc\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","LikeDislikeFunc","reviewId","_s","like","setLike","dislike","setDislike","isLiked","setIsLiked","isDisliked","setIsDisliked","fetchLikesAndDislikes","response","fetch","ok","Error","data","json","love","hate","error","console","updateLike","value","method","headers","body","JSON","stringify","updateDislike","handleLike","handleDislike","children","onClick","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Samsung/Desktop/stellanex_graduation/src/Component/LikeDislikeFunc.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n\r\n// function LikeDislikeFunc({reviewId}) {\r\n//     const [like, setLike] = useState(0);\r\n//     const [dislike, setDislike] = useState(0);\r\n//     const [isLiked, setIsLiked] = useState(false);\r\n//     const [isDisliked, setIsDisliked] = useState(false);\r\n\r\n//     const updateLike = (value) => {\r\n       \r\n//         console.log(\"loveValue: \", value)\r\n\r\n//         fetch(`http://192.168.56.1:8080/movie/love/${reviewId}`, {\r\n//             method: 'POST',\r\n//             headers: {\r\n//                 'Content-Type': 'application/json'\r\n//             },\r\n//             body: JSON.stringify({\r\n//                 love: value\r\n//             })\r\n//         })\r\n//         .then((res) => {\r\n//             // 응답 상태가 성공적이면 JSON으로 파싱\r\n//             if (!res.ok) {\r\n//                 throw new Error('Network response was not ok');\r\n//             }\r\n//             return res.json();\r\n//         })\r\n//         .then((data) => {\r\n//             console.log(\"서버 응답:\", data); // 서버의 응답 내용 확인\r\n//             // 필요한 로직 추가\r\n//             setLike(data.love); // 업데이트된 좋아요 수로 상태 업데이트\r\n//         })\r\n//         .catch((err) => console.error(err));\r\n//     }\r\n\r\n//     const updateDislike = (value) => {\r\n       \r\n//         console.log(\"hateValue: \", value)\r\n\r\n//         fetch(`http://192.168.56.1:8080/movie/hate/${reviewId}`, {\r\n//             method: 'POST',\r\n//             headers: {\r\n//                 'Content-Type': 'application/json'\r\n//             },\r\n//             body: JSON.stringify({\r\n//                 hate: value\r\n//             })\r\n//         })\r\n//         .then((res) => {\r\n//             // 응답 상태가 성공적이면 JSON으로 파싱\r\n//             if (!res.ok) {\r\n//                 throw new Error('Network response was not ok');\r\n//             }\r\n//             return res.json();\r\n//         })\r\n//         .then((data) => {\r\n//             console.log(\"서버 응답:\", data); // 서버의 응답 내용 확인\r\n//             // 필요한 로직 추가\r\n//             setDislike(data.hate); // 업데이트된 좋아요 수로 상태 업데이트\r\n//         })\r\n//         .catch((err) => console.error(err));\r\n//     }\r\n\r\n\r\n//     // 좋아요 버튼 클릭 처리 함수\r\n//     const handleLike = () => {\r\n//         if (isLiked) {\r\n//             setLike(like - 1); // 좋아요 취소\r\n//             updateLike(-1) // 좋아요 취소 전송\r\n//             setIsLiked(false);\r\n//         } else {\r\n//             setLike(like + 1); // 좋아요\r\n//             updateLike(1) // 좋아요 전송\r\n//             setIsLiked(true);\r\n//             if (isDisliked) {\r\n//                 setDislike(dislike - 1); // 싫어요 취소\r\n//                 updateDislike(-1) // 싫어요 취소 전송\r\n//                 setIsDisliked(false);\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     // 싫어요 버튼 클릭 처리 함수\r\n//     const handleDislike = () => {\r\n//         if (isDisliked) {\r\n//             setDislike(dislike - 1); // 싫어요 취소\r\n//             updateDislike(-1) // 싫어요 취소 전송\r\n//             setIsDisliked(false);\r\n//         } else {\r\n//             setDislike(dislike + 1); // 싫어요\r\n//             updateDislike(1) // 싫어요 전송\r\n//             setIsDisliked(true);\r\n//             if (isLiked) {\r\n//                 setLike(like - 1); // 좋아요 취소\r\n//                 updateLike(-1) // 좋아요 취소 전송\r\n//                 setIsLiked(false);\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div>\r\n//             <button onClick={handleLike} className='text-white mr-2'>\r\n//                 👍 좋아요 {like}\r\n//             </button>\r\n//             <button onClick={handleDislike} className='text-white'>\r\n//                 👎 싫어요 {dislike}\r\n//             </button>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default LikeDislikeFunc;\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nfunction LikeDislikeFunc({ reviewId }) {\r\n    const [like, setLike] = useState(0);\r\n    const [dislike, setDislike] = useState(0);\r\n    const [isLiked, setIsLiked] = useState(false);\r\n    const [isDisliked, setIsDisliked] = useState(false);\r\n\r\n    useEffect(() => {\r\n        // 컴포넌트가 마운트될 때 좋아요 및 싫어요 수 가져오기\r\n        const fetchLikesAndDislikes = async () => {\r\n            try {\r\n                const response = await fetch(`http://192.168.56.1:8080/movie/review/${reviewId}`);\r\n                if (!response.ok) throw new Error('Network response was not ok');\r\n                const data = await response.json();\r\n                setLike(data.love);\r\n                setDislike(data.hate);\r\n            } catch (error) {\r\n                console.error(\"Error fetching likes and dislikes:\", error);\r\n            }\r\n        };\r\n        fetchLikesAndDislikes();\r\n    }, [reviewId]);\r\n\r\n    const updateLike = async (value) => {\r\n        try {\r\n            const response = await fetch(`http://192.168.56.1:8080/movie/love/${reviewId}`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ love: value })\r\n            });\r\n            if (!response.ok) throw new Error('Network response was not ok');\r\n            const data = await response.json();\r\n            setLike(data.love); // 서버 응답에 따른 업데이트\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    const updateDislike = async (value) => {\r\n        try {\r\n            const response = await fetch(`http://192.168.56.1:8080/movie/hate/${reviewId}`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ hate: value })\r\n            });\r\n            if (!response.ok) throw new Error('Network response was not ok');\r\n            const data = await response.json();\r\n            setDislike(data.hate); // 서버 응답에 따른 업데이트\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    const handleLike = () => {\r\n        if (isLiked) {\r\n            updateLike(-1); // 좋아요 취소 전송\r\n            setIsLiked(false);\r\n        } else {\r\n            updateLike(1); // 좋아요 전송\r\n            setIsLiked(true);\r\n            if (isDisliked) {\r\n                updateDislike(-1); // 싫어요 취소 전송\r\n                setIsDisliked(false);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleDislike = () => {\r\n        if (isDisliked) {\r\n            updateDislike(-1); // 싫어요 취소 전송\r\n            setIsDisliked(false);\r\n        } else {\r\n            updateDislike(1); // 싫어요 전송\r\n            setIsDisliked(true);\r\n            if (isLiked) {\r\n                updateLike(-1); // 좋아요 취소 전송\r\n                setIsLiked(false);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={handleLike} className='text-white mr-2'>\r\n                👍 좋아요 {like}\r\n            </button>\r\n            <button onClick={handleDislike} className='text-white'>\r\n                👎 싫어요 {dislike}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LikeDislikeFunc;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}