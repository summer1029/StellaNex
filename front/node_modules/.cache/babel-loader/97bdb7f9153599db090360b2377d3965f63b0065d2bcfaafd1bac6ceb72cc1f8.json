{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\Desktop\\\\stellanex_graduation\\\\src\\\\Component\\\\LikeDislikeFunc.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react'\n\n// export default function LikeDislikeFunc({ reviewId, love, hate }) {\n\n//     // 좋아요 갯수 담을 변수\n//     const [like, setLike] = useState()\n//     // 싫어요 갯수 담을 변수\n//     const [dislike, setDislike] = useState()\n//     // 좋아요 상태 변수 : 처음에는 좋아요 되어있지 않음\n//     const [isLiked, setIsLiked] = useState(false)\n//     // 싫어요 상태 변수 : 처음에는 싫어요 되어있지 않음\n//     const [isDisliked, setIsDisliked] = useState(false)\n\n//     useEffect(() => {\n//         setLike(love);\n//     }, [love])\n\n//     useEffect(() => {\n//         setDislike(hate);\n//     }, [hate])\n\n//     const handleLike = () => {\n//         // 1. 아무것도 눌려져있지 않다면 좋아요 1 올리기\n//         if (!isLiked && !isDisliked) {\n//             setLike(like + 1)\n//             setIsLiked(true)\n//         }\n//         // 2. 좋아요 버튼이 이미 클릭 되어있다면 좋아요 1 내리기\n//         else if (isLiked) {\n//             setLike(like - 1)\n//             setIsLiked(false)\n//         }\n//         // 3. 싫어요 버튼이 이미 클릭 되어있다면 좋아요 1 올리고 싫어요 1 내리기\n//         else if (isDisliked) {\n//             setLike(like + 1)\n//             setIsLiked(true)\n//             setDislike(dislike - 1)\n//             setIsDisliked(false)\n//         }\n//     }\n\n//     const handleDislike = () => {\n//         // 1. 아무것도 클릭되어있지 않다면 싫어요 1 올리기\n//         if (!isLiked && !isDisliked) {\n//             setDislike(dislike + 1)\n//             setIsDisliked(true)\n//         }\n//         // 2. 싫어요 버튼이 이미 클릭되어있다면 싫어요 1 내리기\n//         else if (isDisliked) {\n//             setDislike(dislike - 1)\n//             setIsDisliked(false)\n//         }\n//         // 3. 좋아요 버튼이 이미 클릭 되어있다면 싫어요 1 올리기 좋아요 1 내리기\n//         else if (isLiked) {\n//             setDislike(dislike + 1)\n//             setIsDisliked(true)\n//             setLike(like - 1)\n//             setIsLiked(false)\n//         }\n//     }\n\n//     useEffect(() => {\n\n//         fetch(`http://192.168.56.1:8080/movie/love/${reviewId}`, {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json'\n//             },\n//             body: JSON.stringify({\n//                 love: isLiked ? 1 : -1  // 좋아요 상태에 따라 1 또는 -1 전달\n//             })\n//         })\n//             .then((res) => {\n//                 // 응답 상태가 성공적이면 JSON으로 파싱\n//                 if (!res.ok) {\n//                     throw new Error('Network response was not ok');\n//                 }\n//                 return res.json();\n//             })\n//             .then((data) => {\n//                 console.log(\"서버 응답:\", data); // 서버의 응답 내용 확인\n//             })\n//             .catch((err) => console.error(err));\n\n//     }, [like])\n\n//     useEffect(() => {\n\n//         fetch(`http://192.168.56.1:8080/movie/hate/${reviewId}`, {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json'\n//             },\n//             body: JSON.stringify({\n//                 hate: isDisliked ? 1 : -1  // 좋아요 상태에 따라 1 또는 -1 전달\n//             })\n//         })\n//             .then((res) => {\n//                 // 응답 상태가 성공적이면 JSON으로 파싱\n//                 if (!res.ok) {\n//                     throw new Error('Network response was not ok');\n//                 }\n//                 return res.json();\n//             })\n//             .then((data) => {\n//                 console.log(\"서버 응답:\", data); // 서버의 응답 내용 확인\n//             })\n//             .catch((err) => console.error(err));\n\n//     }, [dislike])\n\n//     return (\n//         <div>\n//             <button onClick={handleLike} className='text-white'>\n//                 좋아요 {like}\n//             </button>\n\n//             <button onClick={handleDislike} className='text-white'>\n//                 싫어요 {dislike}\n//             </button>\n//         </div>\n//     )\n// }\n\n// import React, { useEffect, useState } from 'react';\n\n// export default function LikeDislikeFunc({ reviewId, love, hate }) {\n//   // 좋아요 갯수 담을 변수\n//   const [like, setLike] = useState(love);\n//   // 싫어요 갯수 담을 변수\n//   const [dislike, setDislike] = useState(hate);\n//   // 좋아요 상태 변수 : 처음에는 좋아요 되어있지 않음\n//   const [isLiked, setIsLiked] = useState(false);\n//   // 싫어요 상태 변수 : 처음에는 싫어요 되어있지 않음\n//   const [isDisliked, setIsDisliked] = useState(false);\n\n//   const handleLike = () => {\n//     // 1. 아무것도 눌려져있지 않다면 좋아요 1 올리기\n//     if (!isLiked && !isDisliked) {\n//       setLike((prev) => prev + 1);\n//       setIsLiked(true);\n//     }\n//     // 2. 좋아요 버튼이 이미 클릭 되어있다면 좋아요 1 내리기\n//     else if (isLiked) {\n//       setLike((prev) => prev - 1);\n//       setIsLiked(false);\n//     }\n//     // 3. 싫어요 버튼이 이미 클릭 되어있다면 좋아요 1 올리고 싫어요 1 내리기\n//     else if (isDisliked) {\n//       setLike((prev) => prev + 1);\n//       setIsLiked(true);\n//       setDislike((prev) => prev - 1);\n//       setIsDisliked(false);\n//     }\n//   };\n\n//   const handleDislike = () => {\n//     // 1. 아무것도 클릭되어있지 않다면 싫어요 1 올리기\n//     if (!isLiked && !isDisliked) {\n//       setDislike((prev) => prev + 1);\n//       setIsDisliked(true);\n//     }\n//     // 2. 싫어요 버튼이 이미 클릭되어있다면 싫어요 1 내리기\n//     else if (isDisliked) {\n//       setDislike((prev) => prev - 1);\n//       setIsDisliked(false);\n//     }\n//     // 3. 좋아요 버튼이 이미 클릭 되어있다면 싫어요 1 올리기 좋아요 1 내리기\n//     else if (isLiked) {\n//       setDislike((prev) => prev + 1);\n//       setIsDisliked(true);\n//       setLike((prev) => prev - 1);\n//       setIsLiked(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     if (isLiked !== null) {\n//       fetch(`http://192.168.56.1:8080/movie/love/${reviewId}`, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({\n//           love: isLiked ? 1 : -1,\n//         }),\n//       })\n//         .then((res) => {\n//           if (!res.ok) {\n//             throw new Error('Network response was not ok');\n//           }\n//           return res.json();\n//         })\n//         .then((data) => {\n//           console.log('서버 응답:', data);\n//           // 서버 응답의 값과 동기화\n//           setLike(data.love);\n//           setDislike(data.hate)\n//         })\n//         .catch((err) => console.error(err));\n//     }\n//   }, [isLiked, reviewId]);\n\n//   useEffect(() => {\n//     if (isDisliked !== null) {\n//       fetch(`http://192.168.56.1:8080/movie/hate/${reviewId}`, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({\n//           hate: isDisliked ? 1 : -1,\n//         }),\n//       })\n//         .then((res) => {\n//           if (!res.ok) {\n//             throw new Error('Network response was not ok');\n//           }\n//           return res.json();\n//         })\n//         .then((data) => {\n//           console.log('서버 응답:', data);\n//           // 서버 응답의 값과 동기화\n//           setDislike(data.hate);\n//           setLike(data.love)\n//         })\n//         .catch((err) => console.error(err));\n//     }\n//   }, [isDisliked, reviewId]);\n\n//   return (\n//     <div>\n//       <button onClick={handleLike} className=\"text-white\">\n//         좋아요 {like}\n//       </button>\n\n//       <button onClick={handleDislike} className=\"text-white\">\n//         싫어요 {dislike}\n//       </button>\n//     </div>\n//   );\n// }\n\nimport React, { useEffect, useState } from 'react';\n\n// export default function LikeDislikeFunc({ reviewId, love, hate }) {\n//   const [like, setLike] = useState(love);\n//   const [dislike, setDislike] = useState(hate);\n// //   const [isLiked, setIsLiked] = useState(false);\n// //   const [isDisliked, setIsDisliked] = useState(false);   \n//   const [isLiked, setIsLiked] = useState(love > 0);\n//   const [isDisliked, setIsDisliked] = useState(hate > 0);\n\n//   useEffect(() => {\n//     if (isLiked !== null) {\n//         fetch(`http://192.168.56.1:8080/movie/love/${reviewId}`, {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//             },\n//             body: JSON.stringify({\n//                 love: isLiked ? 1 : -1,\n//             }),\n//         })\n//             .then((res) => {\n//                 if (!res.ok) {\n//                     throw new Error('Network response was not ok');\n//                 }\n//                 return res.json();\n//             })\n//             .then((data) => {\n//                 console.log('서버 응답:', data);\n//                 // 서버 응답의 값과 동기화\n//                 setLike(data.love);\n//                 setDislike(data.hate);\n//             })\n//             .catch((err) => console.error(err));\n//     }\n// }, [isLiked]);\n\n// useEffect(() => {\n//     if (isDisliked !== null) {\n//         fetch(`http://192.168.56.1:8080/movie/hate/${reviewId}`, {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//             },\n//             body: JSON.stringify({\n//                 hate: isDisliked ? 1 : -1,\n//             }),\n//         })\n//             .then((res) => {\n//                 if (!res.ok) {\n//                     throw new Error('Network response was not ok');\n//                 }\n//                 return res.json();\n//             })\n//             .then((data) => {\n//                 console.log('서버 응답:', data);\n//                 // 서버 응답의 값과 동기화\n//                 setDislike(data.hate);\n//                 setLike(data.love);\n//             })\n//             .catch((err) => console.error(err));\n//     }\n// }, [isDisliked, reviewId]);\n\n//   const handleLike = () => {\n//     // 1. 아무것도 눌려져있지 않다면 좋아요 1 올리기\n//     if (!isLiked && !isDisliked) {\n//         setLike((prev) => prev + 1);\n//         setIsLiked(true);\n//     }\n//     // 2. 좋아요 버튼이 이미 클릭 되어있다면 좋아요 1 내리기\n//     else if (isLiked) {\n//         setLike((prev) => prev - 1);\n//         setIsLiked(false);\n//     }\n//     // 3. 싫어요 버튼이 이미 클릭 되어있다면 좋아요 1 올리고 싫어요 1 내리기\n//     else if (isDisliked) {\n//         setLike((prev) => prev + 1);\n//         setIsLiked(true);\n//         setDislike((prev) => prev - 1);\n//         setIsDisliked(false);\n//     }\n// };\n\n// const handleDislike = () => {\n//     // 1. 아무것도 클릭되어있지 않다면 싫어요 1 올리기\n//     if (!isLiked && !isDisliked) {\n//         setDislike((prev) => prev + 1);\n//         setIsDisliked(true);\n//     }\n//     // 2. 싫어요 버튼이 이미 클릭되어있다면 싫어요 1 내리기\n//     else if (isDisliked) {\n//         setDislike((prev) => prev - 1);\n//         setIsDisliked(false);\n//     }\n//     // 3. 좋아요 버튼이 이미 클릭 되어있다면 싫어요 1 올리고 좋아요 1 내리기\n//     else if (isLiked) {\n//         setDislike((prev) => prev + 1);\n//         setIsDisliked(true);\n//         setLike((prev) => prev - 1);\n//         setIsLiked(false);\n//     }\n// };\n\n//   return (\n//     <div>\n//       <button onClick={handleLike} className=\"text-white\">\n//         좋아요 {like}\n//       </button>\n\n//       <button onClick={handleDislike} className=\"text-white\">\n//         싫어요 {dislike}\n//       </button>\n//     </div>\n//   );\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LikeDislikeFunc({\n  reviewId,\n  love,\n  hate\n}) {\n  _s();\n  const [like, setLike] = useState(love);\n  const [dislike, setDislike] = useState(hate);\n  //   const [isLiked, setIsLiked] = useState(false);\n  //   const [isDisliked, setIsDisliked] = useState(false);   \n  const [isLiked, setIsLiked] = useState(love > 0);\n  const [isDisliked, setIsDisliked] = useState(hate > 0);\n  const handleLike = () => {\n    if (!isLiked && !isDisliked) {\n      setLike(prev => prev + 1);\n      setIsLiked(true);\n      // 서버에 좋아요 추가 요청\n      fetchLoveUpdate(1);\n    } else if (isLiked) {\n      setLike(prev => prev - 1);\n      setIsLiked(false);\n      // 서버에 좋아요 취소 요청\n      fetchLoveUpdate(-1);\n    } else if (isDisliked) {\n      setLike(prev => prev + 1);\n      setIsLiked(true);\n      setDislike(prev => prev - 1);\n      setIsDisliked(false);\n      // 서버에 좋아요 추가 및 싫어요 취소 요청\n      fetchLoveUpdate(1);\n      fetchHateUpdate(-1);\n    }\n  };\n  const handleDislike = () => {\n    if (!isLiked && !isDisliked) {\n      setDislike(prev => prev + 1);\n      setIsDisliked(true);\n      // 서버에 싫어요 추가 요청\n      fetchHateUpdate(1);\n    } else if (isDisliked) {\n      setDislike(prev => prev - 1);\n      setIsDisliked(false);\n      // 서버에 싫어요 취소 요청\n      fetchHateUpdate(-1);\n    } else if (isLiked) {\n      setDislike(prev => prev + 1);\n      setIsDisliked(true);\n      setLike(prev => prev - 1);\n      setIsLiked(false);\n      // 서버에 싫어요 추가 및 좋아요 취소 요청\n      fetchHateUpdate(1);\n      fetchLoveUpdate(-1);\n    }\n  };\n  const fetchLoveUpdate = action => {\n    fetch(`http://192.168.56.1:8080/movie/love/${reviewId}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        love: action\n      })\n    }).then(handleResponse).catch(err => console.error(err));\n  };\n  const fetchHateUpdate = action => {\n    fetch(`http://192.168.56.1:8080/movie/hate/${reviewId}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        hate: action\n      })\n    }).then(handleResponse).catch(err => console.error(err));\n  };\n  const handleResponse = res => {\n    if (!res.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return res.json().then(data => {\n      console.log('서버 응답:', data);\n      setLike(data.love);\n      setDislike(data.hate);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLike,\n      className: \"text-white\",\n      children: [\"\\uC88B\\uC544\\uC694 \", like]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDislike,\n      className: \"text-white\",\n      children: [\"\\uC2EB\\uC5B4\\uC694 \", dislike]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 461,\n    columnNumber: 7\n  }, this);\n}\n_s(LikeDislikeFunc, \"vQkvJ5bHds/yeWTyhBd16Ep7nNU=\");\n_c = LikeDislikeFunc;\nvar _c;\n$RefreshReg$(_c, \"LikeDislikeFunc\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","LikeDislikeFunc","reviewId","love","hate","_s","like","setLike","dislike","setDislike","isLiked","setIsLiked","isDisliked","setIsDisliked","handleLike","prev","fetchLoveUpdate","fetchHateUpdate","handleDislike","action","fetch","method","headers","body","JSON","stringify","then","handleResponse","catch","err","console","error","res","ok","Error","json","data","log","children","onClick","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Samsung/Desktop/stellanex_graduation/src/Component/LikeDislikeFunc.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react'\r\n\r\n// export default function LikeDislikeFunc({ reviewId, love, hate }) {\r\n\r\n//     // 좋아요 갯수 담을 변수\r\n//     const [like, setLike] = useState()\r\n//     // 싫어요 갯수 담을 변수\r\n//     const [dislike, setDislike] = useState()\r\n//     // 좋아요 상태 변수 : 처음에는 좋아요 되어있지 않음\r\n//     const [isLiked, setIsLiked] = useState(false)\r\n//     // 싫어요 상태 변수 : 처음에는 싫어요 되어있지 않음\r\n//     const [isDisliked, setIsDisliked] = useState(false)\r\n\r\n//     useEffect(() => {\r\n//         setLike(love);\r\n//     }, [love])\r\n\r\n//     useEffect(() => {\r\n//         setDislike(hate);\r\n//     }, [hate])\r\n\r\n\r\n//     const handleLike = () => {\r\n//         // 1. 아무것도 눌려져있지 않다면 좋아요 1 올리기\r\n//         if (!isLiked && !isDisliked) {\r\n//             setLike(like + 1)\r\n//             setIsLiked(true)\r\n//         }\r\n//         // 2. 좋아요 버튼이 이미 클릭 되어있다면 좋아요 1 내리기\r\n//         else if (isLiked) {\r\n//             setLike(like - 1)\r\n//             setIsLiked(false)\r\n//         }\r\n//         // 3. 싫어요 버튼이 이미 클릭 되어있다면 좋아요 1 올리고 싫어요 1 내리기\r\n//         else if (isDisliked) {\r\n//             setLike(like + 1)\r\n//             setIsLiked(true)\r\n//             setDislike(dislike - 1)\r\n//             setIsDisliked(false)\r\n//         }\r\n//     }\r\n\r\n//     const handleDislike = () => {\r\n//         // 1. 아무것도 클릭되어있지 않다면 싫어요 1 올리기\r\n//         if (!isLiked && !isDisliked) {\r\n//             setDislike(dislike + 1)\r\n//             setIsDisliked(true)\r\n//         }\r\n//         // 2. 싫어요 버튼이 이미 클릭되어있다면 싫어요 1 내리기\r\n//         else if (isDisliked) {\r\n//             setDislike(dislike - 1)\r\n//             setIsDisliked(false)\r\n//         }\r\n//         // 3. 좋아요 버튼이 이미 클릭 되어있다면 싫어요 1 올리기 좋아요 1 내리기\r\n//         else if (isLiked) {\r\n//             setDislike(dislike + 1)\r\n//             setIsDisliked(true)\r\n//             setLike(like - 1)\r\n//             setIsLiked(false)\r\n//         }\r\n//     }\r\n\r\n//     useEffect(() => {\r\n\r\n//         fetch(`http://192.168.56.1:8080/movie/love/${reviewId}`, {\r\n//             method: 'POST',\r\n//             headers: {\r\n//                 'Content-Type': 'application/json'\r\n//             },\r\n//             body: JSON.stringify({\r\n//                 love: isLiked ? 1 : -1  // 좋아요 상태에 따라 1 또는 -1 전달\r\n//             })\r\n//         })\r\n//             .then((res) => {\r\n//                 // 응답 상태가 성공적이면 JSON으로 파싱\r\n//                 if (!res.ok) {\r\n//                     throw new Error('Network response was not ok');\r\n//                 }\r\n//                 return res.json();\r\n//             })\r\n//             .then((data) => {\r\n//                 console.log(\"서버 응답:\", data); // 서버의 응답 내용 확인\r\n//             })\r\n//             .catch((err) => console.error(err));\r\n\r\n//     }, [like])\r\n\r\n//     useEffect(() => {\r\n\r\n//         fetch(`http://192.168.56.1:8080/movie/hate/${reviewId}`, {\r\n//             method: 'POST',\r\n//             headers: {\r\n//                 'Content-Type': 'application/json'\r\n//             },\r\n//             body: JSON.stringify({\r\n//                 hate: isDisliked ? 1 : -1  // 좋아요 상태에 따라 1 또는 -1 전달\r\n//             })\r\n//         })\r\n//             .then((res) => {\r\n//                 // 응답 상태가 성공적이면 JSON으로 파싱\r\n//                 if (!res.ok) {\r\n//                     throw new Error('Network response was not ok');\r\n//                 }\r\n//                 return res.json();\r\n//             })\r\n//             .then((data) => {\r\n//                 console.log(\"서버 응답:\", data); // 서버의 응답 내용 확인\r\n//             })\r\n//             .catch((err) => console.error(err));\r\n\r\n//     }, [dislike])\r\n\r\n//     return (\r\n//         <div>\r\n//             <button onClick={handleLike} className='text-white'>\r\n//                 좋아요 {like}\r\n//             </button>\r\n\r\n//             <button onClick={handleDislike} className='text-white'>\r\n//                 싫어요 {dislike}\r\n//             </button>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n\r\n// export default function LikeDislikeFunc({ reviewId, love, hate }) {\r\n//   // 좋아요 갯수 담을 변수\r\n//   const [like, setLike] = useState(love);\r\n//   // 싫어요 갯수 담을 변수\r\n//   const [dislike, setDislike] = useState(hate);\r\n//   // 좋아요 상태 변수 : 처음에는 좋아요 되어있지 않음\r\n//   const [isLiked, setIsLiked] = useState(false);\r\n//   // 싫어요 상태 변수 : 처음에는 싫어요 되어있지 않음\r\n//   const [isDisliked, setIsDisliked] = useState(false);\r\n\r\n//   const handleLike = () => {\r\n//     // 1. 아무것도 눌려져있지 않다면 좋아요 1 올리기\r\n//     if (!isLiked && !isDisliked) {\r\n//       setLike((prev) => prev + 1);\r\n//       setIsLiked(true);\r\n//     }\r\n//     // 2. 좋아요 버튼이 이미 클릭 되어있다면 좋아요 1 내리기\r\n//     else if (isLiked) {\r\n//       setLike((prev) => prev - 1);\r\n//       setIsLiked(false);\r\n//     }\r\n//     // 3. 싫어요 버튼이 이미 클릭 되어있다면 좋아요 1 올리고 싫어요 1 내리기\r\n//     else if (isDisliked) {\r\n//       setLike((prev) => prev + 1);\r\n//       setIsLiked(true);\r\n//       setDislike((prev) => prev - 1);\r\n//       setIsDisliked(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleDislike = () => {\r\n//     // 1. 아무것도 클릭되어있지 않다면 싫어요 1 올리기\r\n//     if (!isLiked && !isDisliked) {\r\n//       setDislike((prev) => prev + 1);\r\n//       setIsDisliked(true);\r\n//     }\r\n//     // 2. 싫어요 버튼이 이미 클릭되어있다면 싫어요 1 내리기\r\n//     else if (isDisliked) {\r\n//       setDislike((prev) => prev - 1);\r\n//       setIsDisliked(false);\r\n//     }\r\n//     // 3. 좋아요 버튼이 이미 클릭 되어있다면 싫어요 1 올리기 좋아요 1 내리기\r\n//     else if (isLiked) {\r\n//       setDislike((prev) => prev + 1);\r\n//       setIsDisliked(true);\r\n//       setLike((prev) => prev - 1);\r\n//       setIsLiked(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (isLiked !== null) {\r\n//       fetch(`http://192.168.56.1:8080/movie/love/${reviewId}`, {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify({\r\n//           love: isLiked ? 1 : -1,\r\n//         }),\r\n//       })\r\n//         .then((res) => {\r\n//           if (!res.ok) {\r\n//             throw new Error('Network response was not ok');\r\n//           }\r\n//           return res.json();\r\n//         })\r\n//         .then((data) => {\r\n//           console.log('서버 응답:', data);\r\n//           // 서버 응답의 값과 동기화\r\n//           setLike(data.love);\r\n//           setDislike(data.hate)\r\n//         })\r\n//         .catch((err) => console.error(err));\r\n//     }\r\n//   }, [isLiked, reviewId]);\r\n  \r\n//   useEffect(() => {\r\n//     if (isDisliked !== null) {\r\n//       fetch(`http://192.168.56.1:8080/movie/hate/${reviewId}`, {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify({\r\n//           hate: isDisliked ? 1 : -1,\r\n//         }),\r\n//       })\r\n//         .then((res) => {\r\n//           if (!res.ok) {\r\n//             throw new Error('Network response was not ok');\r\n//           }\r\n//           return res.json();\r\n//         })\r\n//         .then((data) => {\r\n//           console.log('서버 응답:', data);\r\n//           // 서버 응답의 값과 동기화\r\n//           setDislike(data.hate);\r\n//           setLike(data.love)\r\n//         })\r\n//         .catch((err) => console.error(err));\r\n//     }\r\n//   }, [isDisliked, reviewId]);\r\n  \r\n\r\n//   return (\r\n//     <div>\r\n//       <button onClick={handleLike} className=\"text-white\">\r\n//         좋아요 {like}\r\n//       </button>\r\n\r\n//       <button onClick={handleDislike} className=\"text-white\">\r\n//         싫어요 {dislike}\r\n//       </button>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nimport React, { useEffect, useState } from 'react';\r\n\r\n// export default function LikeDislikeFunc({ reviewId, love, hate }) {\r\n//   const [like, setLike] = useState(love);\r\n//   const [dislike, setDislike] = useState(hate);\r\n// //   const [isLiked, setIsLiked] = useState(false);\r\n// //   const [isDisliked, setIsDisliked] = useState(false);   \r\n//   const [isLiked, setIsLiked] = useState(love > 0);\r\n//   const [isDisliked, setIsDisliked] = useState(hate > 0);\r\n\r\n//   useEffect(() => {\r\n//     if (isLiked !== null) {\r\n//         fetch(`http://192.168.56.1:8080/movie/love/${reviewId}`, {\r\n//             method: 'POST',\r\n//             headers: {\r\n//                 'Content-Type': 'application/json',\r\n//             },\r\n//             body: JSON.stringify({\r\n//                 love: isLiked ? 1 : -1,\r\n//             }),\r\n//         })\r\n//             .then((res) => {\r\n//                 if (!res.ok) {\r\n//                     throw new Error('Network response was not ok');\r\n//                 }\r\n//                 return res.json();\r\n//             })\r\n//             .then((data) => {\r\n//                 console.log('서버 응답:', data);\r\n//                 // 서버 응답의 값과 동기화\r\n//                 setLike(data.love);\r\n//                 setDislike(data.hate);\r\n//             })\r\n//             .catch((err) => console.error(err));\r\n//     }\r\n// }, [isLiked]);\r\n\r\n// useEffect(() => {\r\n//     if (isDisliked !== null) {\r\n//         fetch(`http://192.168.56.1:8080/movie/hate/${reviewId}`, {\r\n//             method: 'POST',\r\n//             headers: {\r\n//                 'Content-Type': 'application/json',\r\n//             },\r\n//             body: JSON.stringify({\r\n//                 hate: isDisliked ? 1 : -1,\r\n//             }),\r\n//         })\r\n//             .then((res) => {\r\n//                 if (!res.ok) {\r\n//                     throw new Error('Network response was not ok');\r\n//                 }\r\n//                 return res.json();\r\n//             })\r\n//             .then((data) => {\r\n//                 console.log('서버 응답:', data);\r\n//                 // 서버 응답의 값과 동기화\r\n//                 setDislike(data.hate);\r\n//                 setLike(data.love);\r\n//             })\r\n//             .catch((err) => console.error(err));\r\n//     }\r\n// }, [isDisliked, reviewId]);\r\n\r\n//   const handleLike = () => {\r\n//     // 1. 아무것도 눌려져있지 않다면 좋아요 1 올리기\r\n//     if (!isLiked && !isDisliked) {\r\n//         setLike((prev) => prev + 1);\r\n//         setIsLiked(true);\r\n//     }\r\n//     // 2. 좋아요 버튼이 이미 클릭 되어있다면 좋아요 1 내리기\r\n//     else if (isLiked) {\r\n//         setLike((prev) => prev - 1);\r\n//         setIsLiked(false);\r\n//     }\r\n//     // 3. 싫어요 버튼이 이미 클릭 되어있다면 좋아요 1 올리고 싫어요 1 내리기\r\n//     else if (isDisliked) {\r\n//         setLike((prev) => prev + 1);\r\n//         setIsLiked(true);\r\n//         setDislike((prev) => prev - 1);\r\n//         setIsDisliked(false);\r\n//     }\r\n// };\r\n\r\n// const handleDislike = () => {\r\n//     // 1. 아무것도 클릭되어있지 않다면 싫어요 1 올리기\r\n//     if (!isLiked && !isDisliked) {\r\n//         setDislike((prev) => prev + 1);\r\n//         setIsDisliked(true);\r\n//     }\r\n//     // 2. 싫어요 버튼이 이미 클릭되어있다면 싫어요 1 내리기\r\n//     else if (isDisliked) {\r\n//         setDislike((prev) => prev - 1);\r\n//         setIsDisliked(false);\r\n//     }\r\n//     // 3. 좋아요 버튼이 이미 클릭 되어있다면 싫어요 1 올리고 좋아요 1 내리기\r\n//     else if (isLiked) {\r\n//         setDislike((prev) => prev + 1);\r\n//         setIsDisliked(true);\r\n//         setLike((prev) => prev - 1);\r\n//         setIsLiked(false);\r\n//     }\r\n// };\r\n\r\n\r\n\r\n\r\n//   return (\r\n//     <div>\r\n//       <button onClick={handleLike} className=\"text-white\">\r\n//         좋아요 {like}\r\n//       </button>\r\n\r\n//       <button onClick={handleDislike} className=\"text-white\">\r\n//         싫어요 {dislike}\r\n//       </button>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nexport default function LikeDislikeFunc({ reviewId, love, hate }) {\r\n    const [like, setLike] = useState(love);\r\n    const [dislike, setDislike] = useState(hate);\r\n  //   const [isLiked, setIsLiked] = useState(false);\r\n  //   const [isDisliked, setIsDisliked] = useState(false);   \r\n    const [isLiked, setIsLiked] = useState(love > 0);\r\n    const [isDisliked, setIsDisliked] = useState(hate > 0);\r\n  \r\n    const handleLike = () => {\r\n        if (!isLiked && !isDisliked) {\r\n            setLike((prev) => prev + 1);\r\n            setIsLiked(true);\r\n            // 서버에 좋아요 추가 요청\r\n            fetchLoveUpdate(1);\r\n        } else if (isLiked) {\r\n            setLike((prev) => prev - 1);\r\n            setIsLiked(false);\r\n            // 서버에 좋아요 취소 요청\r\n            fetchLoveUpdate(-1);\r\n        } else if (isDisliked) {\r\n            setLike((prev) => prev + 1);\r\n            setIsLiked(true);\r\n            setDislike((prev) => prev - 1);\r\n            setIsDisliked(false);\r\n            // 서버에 좋아요 추가 및 싫어요 취소 요청\r\n            fetchLoveUpdate(1);\r\n            fetchHateUpdate(-1);\r\n        }\r\n    };\r\n    \r\n    const handleDislike = () => {\r\n        if (!isLiked && !isDisliked) {\r\n            setDislike((prev) => prev + 1);\r\n            setIsDisliked(true);\r\n            // 서버에 싫어요 추가 요청\r\n            fetchHateUpdate(1);\r\n        } else if (isDisliked) {\r\n            setDislike((prev) => prev - 1);\r\n            setIsDisliked(false);\r\n            // 서버에 싫어요 취소 요청\r\n            fetchHateUpdate(-1);\r\n        } else if (isLiked) {\r\n            setDislike((prev) => prev + 1);\r\n            setIsDisliked(true);\r\n            setLike((prev) => prev - 1);\r\n            setIsLiked(false);\r\n            // 서버에 싫어요 추가 및 좋아요 취소 요청\r\n            fetchHateUpdate(1);\r\n            fetchLoveUpdate(-1);\r\n        }\r\n    };\r\n    \r\n    const fetchLoveUpdate = (action) => {\r\n        fetch(`http://192.168.56.1:8080/movie/love/${reviewId}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                love: action,\r\n            }),\r\n        })\r\n            .then(handleResponse)\r\n            .catch((err) => console.error(err));\r\n    };\r\n    \r\n    const fetchHateUpdate = (action) => {\r\n        fetch(`http://192.168.56.1:8080/movie/hate/${reviewId}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                hate: action,\r\n            }),\r\n        })\r\n            .then(handleResponse)\r\n            .catch((err) => console.error(err));\r\n    };\r\n    \r\n    const handleResponse = (res) => {\r\n        if (!res.ok) {\r\n            throw new Error('Network response was not ok');\r\n        }\r\n        return res.json().then((data) => {\r\n            console.log('서버 응답:', data);\r\n            setLike(data.love);\r\n            setDislike(data.hate);\r\n        });\r\n    };\r\n    \r\n  \r\n  \r\n  \r\n    return (\r\n      <div>\r\n        <button onClick={handleLike} className=\"text-white\">\r\n          좋아요 {like}\r\n        </button>\r\n  \r\n        <button onClick={handleDislike} className=\"text-white\">\r\n          싫어요 {dislike}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n"],"mappings":";;AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;;AAEleAAe,SAASC,eAAeA,CAAC;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"},"metadata":{},"sourceType":"module","externalDependencies":[]}