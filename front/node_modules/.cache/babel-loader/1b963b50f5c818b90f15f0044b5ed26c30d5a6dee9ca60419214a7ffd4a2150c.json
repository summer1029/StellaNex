{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\Desktop\\\\K-Digital\\\\MiniProject\\\\K5_MiniProject\\\\src\\\\Component\\\\Register.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport RegisterForm from './RegisterForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Register() {\n  _s();\n  const navigate = useNavigate();\n  const handleSubmit = async (name, email, password, birth) => {\n    try {\n      if (name.trim() === \"\" || email.trim() === \"\" || password.trim() === \"\" || birth.trim() === \"\") {\n        alert(\"Email address, password, name and birth cannot be empty!\");\n        return;\n      }\n      const response = await fetch(\"http://10.125.121.181:8080/member/join\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name: name,\n          email: email,\n          password: password,\n          birth: birth\n        })\n      });\n      const data = await response.data.json();\n      console.log(\"res 결과\", response);\n      console.log(\"데이터 결과\", data);\n      if (data.status == 200) {\n        navigate(\"/Login\"); // 회원가입 성공 시 로그인 페이지로 이동합니다.\n      } else {\n        console.error(\"회원가입 실패:\", data.error);\n      }\n    } catch (error) {\n      console.log(error);\n      console.error('에러 발생:', error);\n      throw error; // 에러를 다시 던져서 상위 컴포넌트에서 처리할 수 있도록 합니다.\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(RegisterForm, {\n    onSubmit: handleSubmit\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 10\n  }, this);\n}\n\n// import React from 'react'\n// import RegisterForm from './RegisterForm'\n\n// export default function Register() {\n\n//   const handleSubmit = (name, email, password, birth) => {\n\n//     if (name.trim() == \"\" || email.trim() == \"\" || password.trim() == \"\" || birth.trim() == \"\") {\n//       alert(\"Email address, password, name and birth cannot be empty!\")\n//       return\n//     }\n\n//     fetch(\"http://10.125.121.181:8080/member/join\", {\n//       method : \"POST\", \n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body : JSON.stringify({\n//         name : name,\n//         email : email,\n//         password : password,\n//         birth : birth\n//       }),\n//     })\n//     .then(res => res.json())\n//     .then(result => console.log(\"결과: \", result))\n//     .catch(err => console.log('에러 발생:', err))\n//   }\n\n//   return (\n//     <RegisterForm onSubmit={handleSubmit} />\n//   )\n// }\n_s(Register, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c = Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useNavigate","RegisterForm","jsxDEV","_jsxDEV","Register","_s","navigate","handleSubmit","name","email","password","birth","trim","alert","response","fetch","method","headers","body","JSON","stringify","data","json","console","log","status","error","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Samsung/Desktop/K-Digital/MiniProject/K5_MiniProject/src/Component/Register.js"],"sourcesContent":["import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport RegisterForm from './RegisterForm';\r\n\r\nexport default function Register() {\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = async (name, email, password, birth) => {\r\n    try {\r\n\r\n      if (name.trim() === \"\" || email.trim() === \"\" || password.trim() === \"\" || birth.trim() === \"\") {\r\n        alert(\"Email address, password, name and birth cannot be empty!\")\r\n        return\r\n      }\r\n\r\n      const response = await fetch(\"http://10.125.121.181:8080/member/join\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          name: name,\r\n          email: email,\r\n          password: password,\r\n          birth: birth\r\n        }),\r\n      });\r\n      const data = await response.data.json();\r\n      console.log(\"res 결과\", response)\r\n      console.log(\"데이터 결과\", data)\r\n\r\n      if (data.status == 200) {\r\n        navigate(\"/Login\"); // 회원가입 성공 시 로그인 페이지로 이동합니다.\r\n      } else {\r\n        console.error(\"회원가입 실패:\", data.error);\r\n      }\r\n    } catch (error) {\r\n      console.log(error)\r\n      console.error('에러 발생:', error);\r\n      throw error; // 에러를 다시 던져서 상위 컴포넌트에서 처리할 수 있도록 합니다.\r\n    }\r\n  }\r\n\r\n  return <RegisterForm onSubmit={handleSubmit} />;\r\n}\r\n\r\n// import React from 'react'\r\n// import RegisterForm from './RegisterForm'\r\n\r\n// export default function Register() {\r\n\r\n//   const handleSubmit = (name, email, password, birth) => {\r\n\r\n//     if (name.trim() == \"\" || email.trim() == \"\" || password.trim() == \"\" || birth.trim() == \"\") {\r\n//       alert(\"Email address, password, name and birth cannot be empty!\")\r\n//       return\r\n//     }\r\n\r\n//     fetch(\"http://10.125.121.181:8080/member/join\", {\r\n//       method : \"POST\", \r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body : JSON.stringify({\r\n//         name : name,\r\n//         email : email,\r\n//         password : password,\r\n//         birth : birth\r\n//       }),\r\n//     })\r\n//     .then(res => res.json())\r\n//     .then(result => console.log(\"결과: \", result))\r\n//     .catch(err => console.log('에러 발생:', err))\r\n//   }\r\n\r\n//   return (\r\n//     <RegisterForm onSubmit={handleSubmit} />\r\n//   )\r\n// }\r\n\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,eAAe,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAE9B,MAAMO,YAAY,GAAG,MAAAA,CAAOC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,KAAK,KAAK;IAC3D,IAAI;MAEF,IAAIH,IAAI,CAACI,IAAI,CAAC,CAAC,KAAK,EAAE,IAAIH,KAAK,CAACG,IAAI,CAAC,CAAC,KAAK,EAAE,IAAIF,QAAQ,CAACE,IAAI,CAAC,CAAC,KAAK,EAAE,IAAID,KAAK,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QAC9FC,KAAK,CAAC,0DAA0D,CAAC;QACjE;MACF;MAEA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAwC,EAAE;QACrEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBZ,IAAI,EAAEA,IAAI;UACVC,KAAK,EAAEA,KAAK;UACZC,QAAQ,EAAEA,QAAQ;UAClBC,KAAK,EAAEA;QACT,CAAC;MACH,CAAC,CAAC;MACF,MAAMU,IAAI,GAAG,MAAMP,QAAQ,CAACO,IAAI,CAACC,IAAI,CAAC,CAAC;MACvCC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEV,QAAQ,CAAC;MAC/BS,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEH,IAAI,CAAC;MAE3B,IAAIA,IAAI,CAACI,MAAM,IAAI,GAAG,EAAE;QACtBnB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;MACtB,CAAC,MAAM;QACLiB,OAAO,CAACG,KAAK,CAAC,UAAU,EAAEL,IAAI,CAACK,KAAK,CAAC;MACvC;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdH,OAAO,CAACC,GAAG,CAACE,KAAK,CAAC;MAClBH,OAAO,CAACG,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9B,MAAMA,KAAK,CAAC,CAAC;IACf;EACF,CAAC;EAED,oBAAOvB,OAAA,CAACF,YAAY;IAAC0B,QAAQ,EAAEpB;EAAa;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACjD;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA1B,EAAA,CA1EwBD,QAAQ;EAAA,QACbJ,WAAW;AAAA;AAAAgC,EAAA,GADN5B,QAAQ;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}