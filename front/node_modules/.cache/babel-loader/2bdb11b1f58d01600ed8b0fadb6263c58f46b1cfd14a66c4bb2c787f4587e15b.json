{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\Desktop\\\\stellanex_graduation\\\\src\\\\Component\\\\LikeDislikeFunc.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react'\n\n// export default function LikeDislikeFunc({ reviewId, love, hate }) {\n\n//     // 좋아요 갯수 담을 변수\n//     const [like, setLike] = useState()\n//     // 싫어요 갯수 담을 변수\n//     const [dislike, setDislike] = useState()\n//     // 좋아요 상태 변수 : 처음에는 좋아요 되어있지 않음\n//     const [isLiked, setIsLiked] = useState(false)\n//     // 싫어요 상태 변수 : 처음에는 싫어요 되어있지 않음\n//     const [isDisliked, setIsDisliked] = useState(false)\n\n//     useEffect(() => {\n//         setLike(love);\n//     }, [love])\n\n//     useEffect(() => {\n//         setDislike(hate);\n//     }, [hate])\n\n//     const handleLike = () => {\n//         // 1. 아무것도 눌려져있지 않다면 좋아요 1 올리기\n//         if (!isLiked && !isDisliked) {\n//             setLike(like + 1)\n//             setIsLiked(true)\n//         }\n//         // 2. 좋아요 버튼이 이미 클릭 되어있다면 좋아요 1 내리기\n//         else if (isLiked) {\n//             setLike(like - 1)\n//             setIsLiked(false)\n//         }\n//         // 3. 싫어요 버튼이 이미 클릭 되어있다면 좋아요 1 올리고 싫어요 1 내리기\n//         else if (isDisliked) {\n//             setLike(like + 1)\n//             setIsLiked(true)\n//             setDislike(dislike - 1)\n//             setIsDisliked(false)\n//         }\n//     }\n\n//     const handleDislike = () => {\n//         // 1. 아무것도 클릭되어있지 않다면 싫어요 1 올리기\n//         if (!isLiked && !isDisliked) {\n//             setDislike(dislike + 1)\n//             setIsDisliked(true)\n//         }\n//         // 2. 싫어요 버튼이 이미 클릭되어있다면 싫어요 1 내리기\n//         else if (isDisliked) {\n//             setDislike(dislike - 1)\n//             setIsDisliked(false)\n//         }\n//         // 3. 좋아요 버튼이 이미 클릭 되어있다면 싫어요 1 올리기 좋아요 1 내리기\n//         else if (isLiked) {\n//             setDislike(dislike + 1)\n//             setIsDisliked(true)\n//             setLike(like - 1)\n//             setIsLiked(false)\n//         }\n//     }\n\n//     useEffect(() => {\n\n//         fetch(`http://192.168.56.1:8080/movie/love/${reviewId}`, {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json'\n//             },\n//             body: JSON.stringify({\n//                 love: isLiked ? 1 : -1  // 좋아요 상태에 따라 1 또는 -1 전달\n//             })\n//         })\n//             .then((res) => {\n//                 // 응답 상태가 성공적이면 JSON으로 파싱\n//                 if (!res.ok) {\n//                     throw new Error('Network response was not ok');\n//                 }\n//                 return res.json();\n//             })\n//             .then((data) => {\n//                 console.log(\"서버 응답:\", data); // 서버의 응답 내용 확인\n//             })\n//             .catch((err) => console.error(err));\n\n//     }, [like])\n\n//     useEffect(() => {\n\n//         fetch(`http://192.168.56.1:8080/movie/hate/${reviewId}`, {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json'\n//             },\n//             body: JSON.stringify({\n//                 hate: isDisliked ? 1 : -1  // 좋아요 상태에 따라 1 또는 -1 전달\n//             })\n//         })\n//             .then((res) => {\n//                 // 응답 상태가 성공적이면 JSON으로 파싱\n//                 if (!res.ok) {\n//                     throw new Error('Network response was not ok');\n//                 }\n//                 return res.json();\n//             })\n//             .then((data) => {\n//                 console.log(\"서버 응답:\", data); // 서버의 응답 내용 확인\n//             })\n//             .catch((err) => console.error(err));\n\n//     }, [dislike])\n\n//     return (\n//         <div>\n//             <button onClick={handleLike} className='text-white'>\n//                 좋아요 {like}\n//             </button>\n\n//             <button onClick={handleDislike} className='text-white'>\n//                 싫어요 {dislike}\n//             </button>\n//         </div>\n//     )\n// }\n\n// import React, { useEffect, useState } from 'react';\n\n// export default function LikeDislikeFunc({ reviewId, love, hate }) {\n//   // 좋아요 갯수 담을 변수\n//   const [like, setLike] = useState(love);\n//   // 싫어요 갯수 담을 변수\n//   const [dislike, setDislike] = useState(hate);\n//   // 좋아요 상태 변수 : 처음에는 좋아요 되어있지 않음\n//   const [isLiked, setIsLiked] = useState(false);\n//   // 싫어요 상태 변수 : 처음에는 싫어요 되어있지 않음\n//   const [isDisliked, setIsDisliked] = useState(false);\n\n//   const handleLike = () => {\n//     // 1. 아무것도 눌려져있지 않다면 좋아요 1 올리기\n//     if (!isLiked && !isDisliked) {\n//       setLike((prev) => prev + 1);\n//       setIsLiked(true);\n//     }\n//     // 2. 좋아요 버튼이 이미 클릭 되어있다면 좋아요 1 내리기\n//     else if (isLiked) {\n//       setLike((prev) => prev - 1);\n//       setIsLiked(false);\n//     }\n//     // 3. 싫어요 버튼이 이미 클릭 되어있다면 좋아요 1 올리고 싫어요 1 내리기\n//     else if (isDisliked) {\n//       setLike((prev) => prev + 1);\n//       setIsLiked(true);\n//       setDislike((prev) => prev - 1);\n//       setIsDisliked(false);\n//     }\n//   };\n\n//   const handleDislike = () => {\n//     // 1. 아무것도 클릭되어있지 않다면 싫어요 1 올리기\n//     if (!isLiked && !isDisliked) {\n//       setDislike((prev) => prev + 1);\n//       setIsDisliked(true);\n//     }\n//     // 2. 싫어요 버튼이 이미 클릭되어있다면 싫어요 1 내리기\n//     else if (isDisliked) {\n//       setDislike((prev) => prev - 1);\n//       setIsDisliked(false);\n//     }\n//     // 3. 좋아요 버튼이 이미 클릭 되어있다면 싫어요 1 올리기 좋아요 1 내리기\n//     else if (isLiked) {\n//       setDislike((prev) => prev + 1);\n//       setIsDisliked(true);\n//       setLike((prev) => prev - 1);\n//       setIsLiked(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     if (isLiked !== null) {\n//       fetch(`http://192.168.56.1:8080/movie/love/${reviewId}`, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({\n//           love: isLiked ? 1 : -1,\n//         }),\n//       })\n//         .then((res) => {\n//           if (!res.ok) {\n//             throw new Error('Network response was not ok');\n//           }\n//           return res.json();\n//         })\n//         .then((data) => {\n//           console.log('서버 응답:', data);\n//           // 서버 응답의 값과 동기화\n//           setLike(data.love);\n//           setDislike(data.hate)\n//         })\n//         .catch((err) => console.error(err));\n//     }\n//   }, [isLiked, reviewId]);\n\n//   useEffect(() => {\n//     if (isDisliked !== null) {\n//       fetch(`http://192.168.56.1:8080/movie/hate/${reviewId}`, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({\n//           hate: isDisliked ? 1 : -1,\n//         }),\n//       })\n//         .then((res) => {\n//           if (!res.ok) {\n//             throw new Error('Network response was not ok');\n//           }\n//           return res.json();\n//         })\n//         .then((data) => {\n//           console.log('서버 응답:', data);\n//           // 서버 응답의 값과 동기화\n//           setDislike(data.hate);\n//           setLike(data.love)\n//         })\n//         .catch((err) => console.error(err));\n//     }\n//   }, [isDisliked, reviewId]);\n\n//   return (\n//     <div>\n//       <button onClick={handleLike} className=\"text-white\">\n//         좋아요 {like}\n//       </button>\n\n//       <button onClick={handleDislike} className=\"text-white\">\n//         싫어요 {dislike}\n//       </button>\n//     </div>\n//   );\n// }\n\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LikeDislikeFunc({\n  reviewId,\n  love,\n  hate\n}) {\n  _s();\n  const [like, setLike] = useState(love);\n  const [dislike, setDislike] = useState(hate);\n  const [isLiked, setIsLiked] = useState(false);\n  const [isDisliked, setIsDisliked] = useState(false);\n  const updateLikesOnServer = isLiked => {\n    fetch(`http://192.168.56.1:8080/movie/love/${reviewId}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        love: isLiked ? 1 : -1\n      })\n    }).then(res => {\n      if (!res.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return res.json();\n    }).then(data => {\n      console.log('서버 응답:', data);\n      setLike(data.love);\n      setDislike(data.hate);\n    }).catch(err => console.error(err));\n  };\n  const updateDislikesOnServer = isDisliked => {\n    fetch(`http://192.168.56.1:8080/movie/hate/${reviewId}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        hate: isDisliked ? 1 : -1\n      })\n    }).then(res => {\n      if (!res.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return res.json();\n    }).then(data => {\n      console.log('서버 응답:', data);\n      setDislike(data.hate);\n      setLike(data.love);\n    }).catch(err => console.error(err));\n  };\n  const handleLike = () => {\n    if (!isLiked && !isDisliked) {\n      setLike(prev => prev + 1);\n      setIsLiked(true);\n      updateLikesOnServer(true);\n    } else if (isLiked) {\n      setLike(prev => prev - 1);\n      setIsLiked(false);\n      updateLikesOnServer(false);\n    } else if (isDisliked) {\n      setLike(prev => prev + 1);\n      setIsLiked(true);\n      setDislike(prev => prev - 1);\n      setIsDisliked(false);\n      updateLikesOnServer(true);\n      updateDislikesOnServer(false);\n    }\n  };\n  const handleDislike = () => {\n    if (!isLiked && !isDisliked) {\n      setDislike(prev => prev + 1);\n      setIsDisliked(true);\n      updateDislikesOnServer(true);\n    } else if (isDisliked) {\n      setDislike(prev => prev - 1);\n      setIsDisliked(false);\n      updateDislikesOnServer(false);\n    } else if (isLiked) {\n      setDislike(prev => prev + 1);\n      setIsDisliked(true);\n      setLike(prev => prev - 1);\n      setIsLiked(false);\n      updateLikesOnServer(false);\n      updateDislikesOnServer(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLike,\n      className: \"text-white\",\n      children: [\"\\uC88B\\uC544\\uC694 \", like]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDislike,\n      className: \"text-white\",\n      children: [\"\\uC2EB\\uC5B4\\uC694 \", dislike]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 341,\n    columnNumber: 5\n  }, this);\n}\n_s(LikeDislikeFunc, \"Fz1fNXUNwtlSRAm9C8uqZ9kIHdA=\");\n_c = LikeDislikeFunc;\nvar _c;\n$RefreshReg$(_c, \"LikeDislikeFunc\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","LikeDislikeFunc","reviewId","love","hate","_s","like","setLike","dislike","setDislike","isLiked","setIsLiked","isDisliked","setIsDisliked","updateLikesOnServer","fetch","method","headers","body","JSON","stringify","then","res","ok","Error","json","data","console","log","catch","err","error","updateDislikesOnServer","handleLike","prev","handleDislike","children","onClick","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Samsung/Desktop/stellanex_graduation/src/Component/LikeDislikeFunc.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react'\r\n\r\n// export default function LikeDislikeFunc({ reviewId, love, hate }) {\r\n\r\n//     // 좋아요 갯수 담을 변수\r\n//     const [like, setLike] = useState()\r\n//     // 싫어요 갯수 담을 변수\r\n//     const [dislike, setDislike] = useState()\r\n//     // 좋아요 상태 변수 : 처음에는 좋아요 되어있지 않음\r\n//     const [isLiked, setIsLiked] = useState(false)\r\n//     // 싫어요 상태 변수 : 처음에는 싫어요 되어있지 않음\r\n//     const [isDisliked, setIsDisliked] = useState(false)\r\n\r\n//     useEffect(() => {\r\n//         setLike(love);\r\n//     }, [love])\r\n\r\n//     useEffect(() => {\r\n//         setDislike(hate);\r\n//     }, [hate])\r\n\r\n\r\n//     const handleLike = () => {\r\n//         // 1. 아무것도 눌려져있지 않다면 좋아요 1 올리기\r\n//         if (!isLiked && !isDisliked) {\r\n//             setLike(like + 1)\r\n//             setIsLiked(true)\r\n//         }\r\n//         // 2. 좋아요 버튼이 이미 클릭 되어있다면 좋아요 1 내리기\r\n//         else if (isLiked) {\r\n//             setLike(like - 1)\r\n//             setIsLiked(false)\r\n//         }\r\n//         // 3. 싫어요 버튼이 이미 클릭 되어있다면 좋아요 1 올리고 싫어요 1 내리기\r\n//         else if (isDisliked) {\r\n//             setLike(like + 1)\r\n//             setIsLiked(true)\r\n//             setDislike(dislike - 1)\r\n//             setIsDisliked(false)\r\n//         }\r\n//     }\r\n\r\n//     const handleDislike = () => {\r\n//         // 1. 아무것도 클릭되어있지 않다면 싫어요 1 올리기\r\n//         if (!isLiked && !isDisliked) {\r\n//             setDislike(dislike + 1)\r\n//             setIsDisliked(true)\r\n//         }\r\n//         // 2. 싫어요 버튼이 이미 클릭되어있다면 싫어요 1 내리기\r\n//         else if (isDisliked) {\r\n//             setDislike(dislike - 1)\r\n//             setIsDisliked(false)\r\n//         }\r\n//         // 3. 좋아요 버튼이 이미 클릭 되어있다면 싫어요 1 올리기 좋아요 1 내리기\r\n//         else if (isLiked) {\r\n//             setDislike(dislike + 1)\r\n//             setIsDisliked(true)\r\n//             setLike(like - 1)\r\n//             setIsLiked(false)\r\n//         }\r\n//     }\r\n\r\n//     useEffect(() => {\r\n\r\n//         fetch(`http://192.168.56.1:8080/movie/love/${reviewId}`, {\r\n//             method: 'POST',\r\n//             headers: {\r\n//                 'Content-Type': 'application/json'\r\n//             },\r\n//             body: JSON.stringify({\r\n//                 love: isLiked ? 1 : -1  // 좋아요 상태에 따라 1 또는 -1 전달\r\n//             })\r\n//         })\r\n//             .then((res) => {\r\n//                 // 응답 상태가 성공적이면 JSON으로 파싱\r\n//                 if (!res.ok) {\r\n//                     throw new Error('Network response was not ok');\r\n//                 }\r\n//                 return res.json();\r\n//             })\r\n//             .then((data) => {\r\n//                 console.log(\"서버 응답:\", data); // 서버의 응답 내용 확인\r\n//             })\r\n//             .catch((err) => console.error(err));\r\n\r\n//     }, [like])\r\n\r\n//     useEffect(() => {\r\n\r\n//         fetch(`http://192.168.56.1:8080/movie/hate/${reviewId}`, {\r\n//             method: 'POST',\r\n//             headers: {\r\n//                 'Content-Type': 'application/json'\r\n//             },\r\n//             body: JSON.stringify({\r\n//                 hate: isDisliked ? 1 : -1  // 좋아요 상태에 따라 1 또는 -1 전달\r\n//             })\r\n//         })\r\n//             .then((res) => {\r\n//                 // 응답 상태가 성공적이면 JSON으로 파싱\r\n//                 if (!res.ok) {\r\n//                     throw new Error('Network response was not ok');\r\n//                 }\r\n//                 return res.json();\r\n//             })\r\n//             .then((data) => {\r\n//                 console.log(\"서버 응답:\", data); // 서버의 응답 내용 확인\r\n//             })\r\n//             .catch((err) => console.error(err));\r\n\r\n//     }, [dislike])\r\n\r\n//     return (\r\n//         <div>\r\n//             <button onClick={handleLike} className='text-white'>\r\n//                 좋아요 {like}\r\n//             </button>\r\n\r\n//             <button onClick={handleDislike} className='text-white'>\r\n//                 싫어요 {dislike}\r\n//             </button>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n\r\n// export default function LikeDislikeFunc({ reviewId, love, hate }) {\r\n//   // 좋아요 갯수 담을 변수\r\n//   const [like, setLike] = useState(love);\r\n//   // 싫어요 갯수 담을 변수\r\n//   const [dislike, setDislike] = useState(hate);\r\n//   // 좋아요 상태 변수 : 처음에는 좋아요 되어있지 않음\r\n//   const [isLiked, setIsLiked] = useState(false);\r\n//   // 싫어요 상태 변수 : 처음에는 싫어요 되어있지 않음\r\n//   const [isDisliked, setIsDisliked] = useState(false);\r\n\r\n//   const handleLike = () => {\r\n//     // 1. 아무것도 눌려져있지 않다면 좋아요 1 올리기\r\n//     if (!isLiked && !isDisliked) {\r\n//       setLike((prev) => prev + 1);\r\n//       setIsLiked(true);\r\n//     }\r\n//     // 2. 좋아요 버튼이 이미 클릭 되어있다면 좋아요 1 내리기\r\n//     else if (isLiked) {\r\n//       setLike((prev) => prev - 1);\r\n//       setIsLiked(false);\r\n//     }\r\n//     // 3. 싫어요 버튼이 이미 클릭 되어있다면 좋아요 1 올리고 싫어요 1 내리기\r\n//     else if (isDisliked) {\r\n//       setLike((prev) => prev + 1);\r\n//       setIsLiked(true);\r\n//       setDislike((prev) => prev - 1);\r\n//       setIsDisliked(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleDislike = () => {\r\n//     // 1. 아무것도 클릭되어있지 않다면 싫어요 1 올리기\r\n//     if (!isLiked && !isDisliked) {\r\n//       setDislike((prev) => prev + 1);\r\n//       setIsDisliked(true);\r\n//     }\r\n//     // 2. 싫어요 버튼이 이미 클릭되어있다면 싫어요 1 내리기\r\n//     else if (isDisliked) {\r\n//       setDislike((prev) => prev - 1);\r\n//       setIsDisliked(false);\r\n//     }\r\n//     // 3. 좋아요 버튼이 이미 클릭 되어있다면 싫어요 1 올리기 좋아요 1 내리기\r\n//     else if (isLiked) {\r\n//       setDislike((prev) => prev + 1);\r\n//       setIsDisliked(true);\r\n//       setLike((prev) => prev - 1);\r\n//       setIsLiked(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (isLiked !== null) {\r\n//       fetch(`http://192.168.56.1:8080/movie/love/${reviewId}`, {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify({\r\n//           love: isLiked ? 1 : -1,\r\n//         }),\r\n//       })\r\n//         .then((res) => {\r\n//           if (!res.ok) {\r\n//             throw new Error('Network response was not ok');\r\n//           }\r\n//           return res.json();\r\n//         })\r\n//         .then((data) => {\r\n//           console.log('서버 응답:', data);\r\n//           // 서버 응답의 값과 동기화\r\n//           setLike(data.love);\r\n//           setDislike(data.hate)\r\n//         })\r\n//         .catch((err) => console.error(err));\r\n//     }\r\n//   }, [isLiked, reviewId]);\r\n  \r\n//   useEffect(() => {\r\n//     if (isDisliked !== null) {\r\n//       fetch(`http://192.168.56.1:8080/movie/hate/${reviewId}`, {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify({\r\n//           hate: isDisliked ? 1 : -1,\r\n//         }),\r\n//       })\r\n//         .then((res) => {\r\n//           if (!res.ok) {\r\n//             throw new Error('Network response was not ok');\r\n//           }\r\n//           return res.json();\r\n//         })\r\n//         .then((data) => {\r\n//           console.log('서버 응답:', data);\r\n//           // 서버 응답의 값과 동기화\r\n//           setDislike(data.hate);\r\n//           setLike(data.love)\r\n//         })\r\n//         .catch((err) => console.error(err));\r\n//     }\r\n//   }, [isDisliked, reviewId]);\r\n  \r\n\r\n//   return (\r\n//     <div>\r\n//       <button onClick={handleLike} className=\"text-white\">\r\n//         좋아요 {like}\r\n//       </button>\r\n\r\n//       <button onClick={handleDislike} className=\"text-white\">\r\n//         싫어요 {dislike}\r\n//       </button>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nexport default function LikeDislikeFunc({ reviewId, love, hate }) {\r\n  const [like, setLike] = useState(love);\r\n  const [dislike, setDislike] = useState(hate);\r\n  const [isLiked, setIsLiked] = useState(false);\r\n  const [isDisliked, setIsDisliked] = useState(false);\r\n\r\n  const updateLikesOnServer = (isLiked) => {\r\n    fetch(`http://192.168.56.1:8080/movie/love/${reviewId}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        love: isLiked ? 1 : -1,\r\n      }),\r\n    })\r\n    .then((res) => {\r\n      if (!res.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      return res.json();\r\n    })\r\n    .then((data) => {\r\n      console.log('서버 응답:', data);\r\n      setLike(data.love);\r\n      setDislike(data.hate);\r\n    })\r\n    .catch((err) => console.error(err));\r\n  };\r\n\r\n  const updateDislikesOnServer = (isDisliked) => {\r\n    fetch(`http://192.168.56.1:8080/movie/hate/${reviewId}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        hate: isDisliked ? 1 : -1,\r\n      }),\r\n    })\r\n    .then((res) => {\r\n      if (!res.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      return res.json();\r\n    })\r\n    .then((data) => {\r\n      console.log('서버 응답:', data);\r\n      setDislike(data.hate);\r\n      setLike(data.love);\r\n    })\r\n    .catch((err) => console.error(err));\r\n  };\r\n\r\n  const handleLike = () => {\r\n    if (!isLiked && !isDisliked) {\r\n      setLike((prev) => prev + 1);\r\n      setIsLiked(true);\r\n      updateLikesOnServer(true);\r\n    } else if (isLiked) {\r\n      setLike((prev) => prev - 1);\r\n      setIsLiked(false);\r\n      updateLikesOnServer(false);\r\n    } else if (isDisliked) {\r\n      setLike((prev) => prev + 1);\r\n      setIsLiked(true);\r\n      setDislike((prev) => prev - 1);\r\n      setIsDisliked(false);\r\n      updateLikesOnServer(true);\r\n      updateDislikesOnServer(false);\r\n    }\r\n  };\r\n\r\n  const handleDislike = () => {\r\n    if (!isLiked && !isDisliked) {\r\n      setDislike((prev) => prev + 1);\r\n      setIsDisliked(true);\r\n      updateDislikesOnServer(true);\r\n    } else if (isDisliked) {\r\n      setDislike((prev) => prev - 1);\r\n      setIsDisliked(false);\r\n      updateDislikesOnServer(false);\r\n    } else if (isLiked) {\r\n      setDislike((prev) => prev + 1);\r\n      setIsDisliked(true);\r\n      setLike((prev) => prev - 1);\r\n      setIsLiked(false);\r\n      updateLikesOnServer(false);\r\n      updateDislikesOnServer(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleLike} className=\"text-white\">\r\n        좋아요 {like}\r\n      </button>\r\n\r\n      <button onClick={handleDislike} className=\"text-white\">\r\n        싫어요 {dislike}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\n"],"mappings":";;AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;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"},"metadata":{},"sourceType":"module","externalDependencies":[]}