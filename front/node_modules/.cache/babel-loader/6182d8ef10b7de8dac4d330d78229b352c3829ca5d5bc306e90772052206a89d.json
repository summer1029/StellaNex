{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\Desktop\\\\stellanex_graduation\\\\src\\\\Component\\\\LikeDislikeFunc.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react'\n\n// export default function LikeDislikeFunc({ reviewId, love, hate }) {\n\n//     // 좋아요 갯수 담을 변수\n//     const [like, setLike] = useState()\n//     // 싫어요 갯수 담을 변수\n//     const [dislike, setDislike] = useState()\n//     // 좋아요 상태 변수 : 처음에는 좋아요 되어있지 않음\n//     const [isLiked, setIsLiked] = useState(false)\n//     // 싫어요 상태 변수 : 처음에는 싫어요 되어있지 않음\n//     const [isDisliked, setIsDisliked] = useState(false)\n\n//     useEffect(() => {\n//         setLike(love);\n//     }, [love])\n\n//     useEffect(() => {\n//         setDislike(hate);\n//     }, [hate])\n\n//     const handleLike = () => {\n//         // 1. 아무것도 눌려져있지 않다면 좋아요 1 올리기\n//         if (!isLiked && !isDisliked) {\n//             setLike(like + 1)\n//             setIsLiked(true)\n//         }\n//         // 2. 좋아요 버튼이 이미 클릭 되어있다면 좋아요 1 내리기\n//         else if (isLiked) {\n//             setLike(like - 1)\n//             setIsLiked(false)\n//         }\n//         // 3. 싫어요 버튼이 이미 클릭 되어있다면 좋아요 1 올리고 싫어요 1 내리기\n//         else if (isDisliked) {\n//             setLike(like + 1)\n//             setIsLiked(true)\n//             setDislike(dislike - 1)\n//             setIsDisliked(false)\n//         }\n//     }\n\n//     const handleDislike = () => {\n//         // 1. 아무것도 클릭되어있지 않다면 싫어요 1 올리기\n//         if (!isLiked && !isDisliked) {\n//             setDislike(dislike + 1)\n//             setIsDisliked(true)\n//         }\n//         // 2. 싫어요 버튼이 이미 클릭되어있다면 싫어요 1 내리기\n//         else if (isDisliked) {\n//             setDislike(dislike - 1)\n//             setIsDisliked(false)\n//         }\n//         // 3. 좋아요 버튼이 이미 클릭 되어있다면 싫어요 1 올리기 좋아요 1 내리기\n//         else if (isLiked) {\n//             setDislike(dislike + 1)\n//             setIsDisliked(true)\n//             setLike(like - 1)\n//             setIsLiked(false)\n//         }\n//     }\n\n//     useEffect(() => {\n\n//         fetch(`http://192.168.56.1:8080/movie/love/${reviewId}`, {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json'\n//             },\n//             body: JSON.stringify({\n//                 love: isLiked ? 1 : -1  // 좋아요 상태에 따라 1 또는 -1 전달\n//             })\n//         })\n//             .then((res) => {\n//                 // 응답 상태가 성공적이면 JSON으로 파싱\n//                 if (!res.ok) {\n//                     throw new Error('Network response was not ok');\n//                 }\n//                 return res.json();\n//             })\n//             .then((data) => {\n//                 console.log(\"서버 응답:\", data); // 서버의 응답 내용 확인\n//             })\n//             .catch((err) => console.error(err));\n\n//     }, [like])\n\n//     useEffect(() => {\n\n//         fetch(`http://192.168.56.1:8080/movie/hate/${reviewId}`, {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json'\n//             },\n//             body: JSON.stringify({\n//                 hate: isDisliked ? 1 : -1  // 좋아요 상태에 따라 1 또는 -1 전달\n//             })\n//         })\n//             .then((res) => {\n//                 // 응답 상태가 성공적이면 JSON으로 파싱\n//                 if (!res.ok) {\n//                     throw new Error('Network response was not ok');\n//                 }\n//                 return res.json();\n//             })\n//             .then((data) => {\n//                 console.log(\"서버 응답:\", data); // 서버의 응답 내용 확인\n//             })\n//             .catch((err) => console.error(err));\n\n//     }, [dislike])\n\n//     return (\n//         <div>\n//             <button onClick={handleLike} className='text-white'>\n//                 좋아요 {like}\n//             </button>\n\n//             <button onClick={handleDislike} className='text-white'>\n//                 싫어요 {dislike}\n//             </button>\n//         </div>\n//     )\n// }\n\n// import React, { useEffect, useState } from 'react';\n\n// export default function LikeDislikeFunc({ reviewId, love, hate }) {\n//   // 좋아요 갯수 담을 변수\n//   const [like, setLike] = useState(love);\n//   // 싫어요 갯수 담을 변수\n//   const [dislike, setDislike] = useState(hate);\n//   // 좋아요 상태 변수 : 처음에는 좋아요 되어있지 않음\n//   const [isLiked, setIsLiked] = useState(false);\n//   // 싫어요 상태 변수 : 처음에는 싫어요 되어있지 않음\n//   const [isDisliked, setIsDisliked] = useState(false);\n\n//   const handleLike = () => {\n//     // 1. 아무것도 눌려져있지 않다면 좋아요 1 올리기\n//     if (!isLiked && !isDisliked) {\n//       setLike((prev) => prev + 1);\n//       setIsLiked(true);\n//     }\n//     // 2. 좋아요 버튼이 이미 클릭 되어있다면 좋아요 1 내리기\n//     else if (isLiked) {\n//       setLike((prev) => prev - 1);\n//       setIsLiked(false);\n//     }\n//     // 3. 싫어요 버튼이 이미 클릭 되어있다면 좋아요 1 올리고 싫어요 1 내리기\n//     else if (isDisliked) {\n//       setLike((prev) => prev + 1);\n//       setIsLiked(true);\n//       setDislike((prev) => prev - 1);\n//       setIsDisliked(false);\n//     }\n//   };\n\n//   const handleDislike = () => {\n//     // 1. 아무것도 클릭되어있지 않다면 싫어요 1 올리기\n//     if (!isLiked && !isDisliked) {\n//       setDislike((prev) => prev + 1);\n//       setIsDisliked(true);\n//     }\n//     // 2. 싫어요 버튼이 이미 클릭되어있다면 싫어요 1 내리기\n//     else if (isDisliked) {\n//       setDislike((prev) => prev - 1);\n//       setIsDisliked(false);\n//     }\n//     // 3. 좋아요 버튼이 이미 클릭 되어있다면 싫어요 1 올리기 좋아요 1 내리기\n//     else if (isLiked) {\n//       setDislike((prev) => prev + 1);\n//       setIsDisliked(true);\n//       setLike((prev) => prev - 1);\n//       setIsLiked(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     if (isLiked !== null) {\n//       fetch(`http://192.168.56.1:8080/movie/love/${reviewId}`, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({\n//           love: isLiked ? 1 : -1,\n//         }),\n//       })\n//         .then((res) => {\n//           if (!res.ok) {\n//             throw new Error('Network response was not ok');\n//           }\n//           return res.json();\n//         })\n//         .then((data) => {\n//           console.log('서버 응답:', data);\n//           // 서버 응답의 값과 동기화\n//           setLike(data.love);\n//           setDislike(data.hate)\n//         })\n//         .catch((err) => console.error(err));\n//     }\n//   }, [isLiked, reviewId]);\n\n//   useEffect(() => {\n//     if (isDisliked !== null) {\n//       fetch(`http://192.168.56.1:8080/movie/hate/${reviewId}`, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({\n//           hate: isDisliked ? 1 : -1,\n//         }),\n//       })\n//         .then((res) => {\n//           if (!res.ok) {\n//             throw new Error('Network response was not ok');\n//           }\n//           return res.json();\n//         })\n//         .then((data) => {\n//           console.log('서버 응답:', data);\n//           // 서버 응답의 값과 동기화\n//           setDislike(data.hate);\n//           setLike(data.love)\n//         })\n//         .catch((err) => console.error(err));\n//     }\n//   }, [isDisliked, reviewId]);\n\n//   return (\n//     <div>\n//       <button onClick={handleLike} className=\"text-white\">\n//         좋아요 {like}\n//       </button>\n\n//       <button onClick={handleDislike} className=\"text-white\">\n//         싫어요 {dislike}\n//       </button>\n//     </div>\n//   );\n// }\n\n// import React, { useEffect, useState } from 'react';\n\n// export default function LikeDislikeFunc({ reviewId, love, hate }) {\n//   const [like, setLike] = useState(love);\n//   const [dislike, setDislike] = useState(hate);\n// //   const [isLiked, setIsLiked] = useState(false);\n// //   const [isDisliked, setIsDisliked] = useState(false);   \n//   const [isLiked, setIsLiked] = useState(love > 0);\n//   const [isDisliked, setIsDisliked] = useState(hate > 0);\n\n//   useEffect(() => {\n//     if (isLiked !== null) {\n//         fetch(`http://192.168.56.1:8080/movie/love/${reviewId}`, {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//             },\n//             body: JSON.stringify({\n//                 love: isLiked ? 1 : -1,\n//             }),\n//         })\n//             .then((res) => {\n//                 if (!res.ok) {\n//                     throw new Error('Network response was not ok');\n//                 }\n//                 return res.json();\n//             })\n//             .then((data) => {\n//                 console.log('서버 응답:', data);\n//                 // 서버 응답의 값과 동기화\n//                 setLike(data.love);\n//                 setDislike(data.hate);\n//             })\n//             .catch((err) => console.error(err));\n//     }\n// }, [isLiked]);\n\n// useEffect(() => {\n//     if (isDisliked !== null) {\n//         fetch(`http://192.168.56.1:8080/movie/hate/${reviewId}`, {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//             },\n//             body: JSON.stringify({\n//                 hate: isDisliked ? 1 : -1,\n//             }),\n//         })\n//             .then((res) => {\n//                 if (!res.ok) {\n//                     throw new Error('Network response was not ok');\n//                 }\n//                 return res.json();\n//             })\n//             .then((data) => {\n//                 console.log('서버 응답:', data);\n//                 // 서버 응답의 값과 동기화\n//                 setDislike(data.hate);\n//                 setLike(data.love);\n//             })\n//             .catch((err) => console.error(err));\n//     }\n// }, [isDisliked, reviewId]);\n\n//   const handleLike = () => {\n//     // 1. 아무것도 눌려져있지 않다면 좋아요 1 올리기\n//     if (!isLiked && !isDisliked) {\n//         setLike((prev) => prev + 1);\n//         setIsLiked(true);\n//     }\n//     // 2. 좋아요 버튼이 이미 클릭 되어있다면 좋아요 1 내리기\n//     else if (isLiked) {\n//         setLike((prev) => prev - 1);\n//         setIsLiked(false);\n//     }\n//     // 3. 싫어요 버튼이 이미 클릭 되어있다면 좋아요 1 올리고 싫어요 1 내리기\n//     else if (isDisliked) {\n//         setLike((prev) => prev + 1);\n//         setIsLiked(true);\n//         setDislike((prev) => prev - 1);\n//         setIsDisliked(false);\n//     }\n// };\n\n// const handleDislike = () => {\n//     // 1. 아무것도 클릭되어있지 않다면 싫어요 1 올리기\n//     if (!isLiked && !isDisliked) {\n//         setDislike((prev) => prev + 1);\n//         setIsDisliked(true);\n//     }\n//     // 2. 싫어요 버튼이 이미 클릭되어있다면 싫어요 1 내리기\n//     else if (isDisliked) {\n//         setDislike((prev) => prev - 1);\n//         setIsDisliked(false);\n//     }\n//     // 3. 좋아요 버튼이 이미 클릭 되어있다면 싫어요 1 올리고 좋아요 1 내리기\n//     else if (isLiked) {\n//         setDislike((prev) => prev + 1);\n//         setIsDisliked(true);\n//         setLike((prev) => prev - 1);\n//         setIsLiked(false);\n//     }\n// };\n\n//   return (\n//     <div>\n//       <button onClick={handleLike} className=\"text-white\">\n//         좋아요 {like}\n//       </button>\n\n//       <button onClick={handleDislike} className=\"text-white\">\n//         싫어요 {dislike}\n//       </button>\n//     </div>\n//   );\n// }\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LikeDislikeFunc({\n  reviewId,\n  love,\n  hate\n}) {\n  _s();\n  const [like, setLike] = useState(love);\n  const [dislike, setDislike] = useState(hate);\n  const [isLiked, setIsLiked] = useState(love > 0);\n  const [isDisliked, setIsDisliked] = useState(hate > 0);\n  const [isLoading, setIsLoading] = useState(false); // 로딩 상태 추가\n\n  const handleLike = async () => {\n    if (isLoading) return; // 로딩 중일 경우 함수 종료\n\n    setIsLoading(true); // 요청 시작\n    try {\n      if (!isLiked && !isDisliked) {\n        setLike(prev => prev + 1);\n        setIsLiked(true);\n        await fetchLoveUpdate(1); // 서버에 좋아요 추가 요청\n      } else if (isLiked) {\n        setLike(prev => prev - 1);\n        setIsLiked(false);\n        await fetchLoveUpdate(-1); // 서버에 좋아요 취소 요청\n      } else if (isDisliked) {\n        setLike(prev => prev + 1);\n        setIsLiked(true);\n        setDislike(prev => prev - 1);\n        setIsDisliked(false);\n        await fetchLoveUpdate(1); // 서버에 좋아요 추가\n        await fetchHateUpdate(-1); // 서버에 싫어요 취소 요청\n      }\n    } catch (error) {\n      console.error('좋아요 요청 오류:', error);\n    } finally {\n      setIsLoading(false); // 요청 완료\n    }\n  };\n  const handleDislike = async () => {\n    if (isLoading) return; // 로딩 중일 경우 함수 종료\n\n    setIsLoading(true); // 요청 시작\n    try {\n      if (!isLiked && !isDisliked) {\n        setDislike(prev => prev + 1);\n        setIsDisliked(true);\n        await fetchHateUpdate(1); // 서버에 싫어요 추가 요청\n      } else if (isDisliked) {\n        setDislike(prev => prev - 1);\n        setIsDisliked(false);\n        await fetchHateUpdate(-1); // 서버에 싫어요 취소 요청\n      } else if (isLiked) {\n        setDislike(prev => prev + 1);\n        setIsDisliked(true);\n        setLike(prev => prev - 1);\n        setIsLiked(false);\n        await fetchHateUpdate(1); // 서버에 싫어요 추가\n        await fetchLoveUpdate(-1); // 서버에 좋아요 취소 요청\n      }\n    } catch (error) {\n      console.error('싫어요 요청 오류:', error);\n    } finally {\n      setIsLoading(false); // 요청 완료\n    }\n  };\n  const fetchLoveUpdate = async action => {\n    const response = await fetch(`http://192.168.56.1:8080/movie/love/${reviewId}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        love: action\n      })\n    });\n    return handleResponse(response);\n  };\n  const fetchHateUpdate = async action => {\n    const response = await fetch(`http://192.168.56.1:8080/movie/hate/${reviewId}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        hate: action\n      })\n    });\n    return handleResponse(response);\n  };\n  const handleResponse = async res => {\n    if (!res.ok) {\n      throw new Error('Network response was not ok');\n    }\n    const data = await res.json();\n    console.log('서버 응답:', data);\n    setLike(data.love);\n    setDislike(data.hate);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLike,\n      className: \"text-white\",\n      disabled: isLoading,\n      children: [\"\\uC88B\\uC544\\uC694 \", like]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDislike,\n      className: \"text-white\",\n      disabled: isLoading,\n      children: [\"\\uC2EB\\uC5B4\\uC694 \", dislike]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 468,\n    columnNumber: 7\n  }, this);\n}\n_s(LikeDislikeFunc, \"pUPTzaLksLmjHUNF4UOUQtmQ6kw=\");\n_c = LikeDislikeFunc;\nvar _c;\n$RefreshReg$(_c, \"LikeDislikeFunc\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","LikeDislikeFunc","reviewId","love","hate","_s","like","setLike","dislike","setDislike","isLiked","setIsLiked","isDisliked","setIsDisliked","isLoading","setIsLoading","handleLike","prev","fetchLoveUpdate","fetchHateUpdate","error","console","handleDislike","action","response","fetch","method","headers","body","JSON","stringify","handleResponse","res","ok","Error","data","json","log","children","onClick","className","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Samsung/Desktop/stellanex_graduation/src/Component/LikeDislikeFunc.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react'\r\n\r\n// export default function LikeDislikeFunc({ reviewId, love, hate }) {\r\n\r\n//     // 좋아요 갯수 담을 변수\r\n//     const [like, setLike] = useState()\r\n//     // 싫어요 갯수 담을 변수\r\n//     const [dislike, setDislike] = useState()\r\n//     // 좋아요 상태 변수 : 처음에는 좋아요 되어있지 않음\r\n//     const [isLiked, setIsLiked] = useState(false)\r\n//     // 싫어요 상태 변수 : 처음에는 싫어요 되어있지 않음\r\n//     const [isDisliked, setIsDisliked] = useState(false)\r\n\r\n//     useEffect(() => {\r\n//         setLike(love);\r\n//     }, [love])\r\n\r\n//     useEffect(() => {\r\n//         setDislike(hate);\r\n//     }, [hate])\r\n\r\n\r\n//     const handleLike = () => {\r\n//         // 1. 아무것도 눌려져있지 않다면 좋아요 1 올리기\r\n//         if (!isLiked && !isDisliked) {\r\n//             setLike(like + 1)\r\n//             setIsLiked(true)\r\n//         }\r\n//         // 2. 좋아요 버튼이 이미 클릭 되어있다면 좋아요 1 내리기\r\n//         else if (isLiked) {\r\n//             setLike(like - 1)\r\n//             setIsLiked(false)\r\n//         }\r\n//         // 3. 싫어요 버튼이 이미 클릭 되어있다면 좋아요 1 올리고 싫어요 1 내리기\r\n//         else if (isDisliked) {\r\n//             setLike(like + 1)\r\n//             setIsLiked(true)\r\n//             setDislike(dislike - 1)\r\n//             setIsDisliked(false)\r\n//         }\r\n//     }\r\n\r\n//     const handleDislike = () => {\r\n//         // 1. 아무것도 클릭되어있지 않다면 싫어요 1 올리기\r\n//         if (!isLiked && !isDisliked) {\r\n//             setDislike(dislike + 1)\r\n//             setIsDisliked(true)\r\n//         }\r\n//         // 2. 싫어요 버튼이 이미 클릭되어있다면 싫어요 1 내리기\r\n//         else if (isDisliked) {\r\n//             setDislike(dislike - 1)\r\n//             setIsDisliked(false)\r\n//         }\r\n//         // 3. 좋아요 버튼이 이미 클릭 되어있다면 싫어요 1 올리기 좋아요 1 내리기\r\n//         else if (isLiked) {\r\n//             setDislike(dislike + 1)\r\n//             setIsDisliked(true)\r\n//             setLike(like - 1)\r\n//             setIsLiked(false)\r\n//         }\r\n//     }\r\n\r\n//     useEffect(() => {\r\n\r\n//         fetch(`http://192.168.56.1:8080/movie/love/${reviewId}`, {\r\n//             method: 'POST',\r\n//             headers: {\r\n//                 'Content-Type': 'application/json'\r\n//             },\r\n//             body: JSON.stringify({\r\n//                 love: isLiked ? 1 : -1  // 좋아요 상태에 따라 1 또는 -1 전달\r\n//             })\r\n//         })\r\n//             .then((res) => {\r\n//                 // 응답 상태가 성공적이면 JSON으로 파싱\r\n//                 if (!res.ok) {\r\n//                     throw new Error('Network response was not ok');\r\n//                 }\r\n//                 return res.json();\r\n//             })\r\n//             .then((data) => {\r\n//                 console.log(\"서버 응답:\", data); // 서버의 응답 내용 확인\r\n//             })\r\n//             .catch((err) => console.error(err));\r\n\r\n//     }, [like])\r\n\r\n//     useEffect(() => {\r\n\r\n//         fetch(`http://192.168.56.1:8080/movie/hate/${reviewId}`, {\r\n//             method: 'POST',\r\n//             headers: {\r\n//                 'Content-Type': 'application/json'\r\n//             },\r\n//             body: JSON.stringify({\r\n//                 hate: isDisliked ? 1 : -1  // 좋아요 상태에 따라 1 또는 -1 전달\r\n//             })\r\n//         })\r\n//             .then((res) => {\r\n//                 // 응답 상태가 성공적이면 JSON으로 파싱\r\n//                 if (!res.ok) {\r\n//                     throw new Error('Network response was not ok');\r\n//                 }\r\n//                 return res.json();\r\n//             })\r\n//             .then((data) => {\r\n//                 console.log(\"서버 응답:\", data); // 서버의 응답 내용 확인\r\n//             })\r\n//             .catch((err) => console.error(err));\r\n\r\n//     }, [dislike])\r\n\r\n//     return (\r\n//         <div>\r\n//             <button onClick={handleLike} className='text-white'>\r\n//                 좋아요 {like}\r\n//             </button>\r\n\r\n//             <button onClick={handleDislike} className='text-white'>\r\n//                 싫어요 {dislike}\r\n//             </button>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n\r\n// export default function LikeDislikeFunc({ reviewId, love, hate }) {\r\n//   // 좋아요 갯수 담을 변수\r\n//   const [like, setLike] = useState(love);\r\n//   // 싫어요 갯수 담을 변수\r\n//   const [dislike, setDislike] = useState(hate);\r\n//   // 좋아요 상태 변수 : 처음에는 좋아요 되어있지 않음\r\n//   const [isLiked, setIsLiked] = useState(false);\r\n//   // 싫어요 상태 변수 : 처음에는 싫어요 되어있지 않음\r\n//   const [isDisliked, setIsDisliked] = useState(false);\r\n\r\n//   const handleLike = () => {\r\n//     // 1. 아무것도 눌려져있지 않다면 좋아요 1 올리기\r\n//     if (!isLiked && !isDisliked) {\r\n//       setLike((prev) => prev + 1);\r\n//       setIsLiked(true);\r\n//     }\r\n//     // 2. 좋아요 버튼이 이미 클릭 되어있다면 좋아요 1 내리기\r\n//     else if (isLiked) {\r\n//       setLike((prev) => prev - 1);\r\n//       setIsLiked(false);\r\n//     }\r\n//     // 3. 싫어요 버튼이 이미 클릭 되어있다면 좋아요 1 올리고 싫어요 1 내리기\r\n//     else if (isDisliked) {\r\n//       setLike((prev) => prev + 1);\r\n//       setIsLiked(true);\r\n//       setDislike((prev) => prev - 1);\r\n//       setIsDisliked(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleDislike = () => {\r\n//     // 1. 아무것도 클릭되어있지 않다면 싫어요 1 올리기\r\n//     if (!isLiked && !isDisliked) {\r\n//       setDislike((prev) => prev + 1);\r\n//       setIsDisliked(true);\r\n//     }\r\n//     // 2. 싫어요 버튼이 이미 클릭되어있다면 싫어요 1 내리기\r\n//     else if (isDisliked) {\r\n//       setDislike((prev) => prev - 1);\r\n//       setIsDisliked(false);\r\n//     }\r\n//     // 3. 좋아요 버튼이 이미 클릭 되어있다면 싫어요 1 올리기 좋아요 1 내리기\r\n//     else if (isLiked) {\r\n//       setDislike((prev) => prev + 1);\r\n//       setIsDisliked(true);\r\n//       setLike((prev) => prev - 1);\r\n//       setIsLiked(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (isLiked !== null) {\r\n//       fetch(`http://192.168.56.1:8080/movie/love/${reviewId}`, {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify({\r\n//           love: isLiked ? 1 : -1,\r\n//         }),\r\n//       })\r\n//         .then((res) => {\r\n//           if (!res.ok) {\r\n//             throw new Error('Network response was not ok');\r\n//           }\r\n//           return res.json();\r\n//         })\r\n//         .then((data) => {\r\n//           console.log('서버 응답:', data);\r\n//           // 서버 응답의 값과 동기화\r\n//           setLike(data.love);\r\n//           setDislike(data.hate)\r\n//         })\r\n//         .catch((err) => console.error(err));\r\n//     }\r\n//   }, [isLiked, reviewId]);\r\n  \r\n//   useEffect(() => {\r\n//     if (isDisliked !== null) {\r\n//       fetch(`http://192.168.56.1:8080/movie/hate/${reviewId}`, {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify({\r\n//           hate: isDisliked ? 1 : -1,\r\n//         }),\r\n//       })\r\n//         .then((res) => {\r\n//           if (!res.ok) {\r\n//             throw new Error('Network response was not ok');\r\n//           }\r\n//           return res.json();\r\n//         })\r\n//         .then((data) => {\r\n//           console.log('서버 응답:', data);\r\n//           // 서버 응답의 값과 동기화\r\n//           setDislike(data.hate);\r\n//           setLike(data.love)\r\n//         })\r\n//         .catch((err) => console.error(err));\r\n//     }\r\n//   }, [isDisliked, reviewId]);\r\n  \r\n\r\n//   return (\r\n//     <div>\r\n//       <button onClick={handleLike} className=\"text-white\">\r\n//         좋아요 {like}\r\n//       </button>\r\n\r\n//       <button onClick={handleDislike} className=\"text-white\">\r\n//         싫어요 {dislike}\r\n//       </button>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n\r\n// export default function LikeDislikeFunc({ reviewId, love, hate }) {\r\n//   const [like, setLike] = useState(love);\r\n//   const [dislike, setDislike] = useState(hate);\r\n// //   const [isLiked, setIsLiked] = useState(false);\r\n// //   const [isDisliked, setIsDisliked] = useState(false);   \r\n//   const [isLiked, setIsLiked] = useState(love > 0);\r\n//   const [isDisliked, setIsDisliked] = useState(hate > 0);\r\n\r\n//   useEffect(() => {\r\n//     if (isLiked !== null) {\r\n//         fetch(`http://192.168.56.1:8080/movie/love/${reviewId}`, {\r\n//             method: 'POST',\r\n//             headers: {\r\n//                 'Content-Type': 'application/json',\r\n//             },\r\n//             body: JSON.stringify({\r\n//                 love: isLiked ? 1 : -1,\r\n//             }),\r\n//         })\r\n//             .then((res) => {\r\n//                 if (!res.ok) {\r\n//                     throw new Error('Network response was not ok');\r\n//                 }\r\n//                 return res.json();\r\n//             })\r\n//             .then((data) => {\r\n//                 console.log('서버 응답:', data);\r\n//                 // 서버 응답의 값과 동기화\r\n//                 setLike(data.love);\r\n//                 setDislike(data.hate);\r\n//             })\r\n//             .catch((err) => console.error(err));\r\n//     }\r\n// }, [isLiked]);\r\n\r\n// useEffect(() => {\r\n//     if (isDisliked !== null) {\r\n//         fetch(`http://192.168.56.1:8080/movie/hate/${reviewId}`, {\r\n//             method: 'POST',\r\n//             headers: {\r\n//                 'Content-Type': 'application/json',\r\n//             },\r\n//             body: JSON.stringify({\r\n//                 hate: isDisliked ? 1 : -1,\r\n//             }),\r\n//         })\r\n//             .then((res) => {\r\n//                 if (!res.ok) {\r\n//                     throw new Error('Network response was not ok');\r\n//                 }\r\n//                 return res.json();\r\n//             })\r\n//             .then((data) => {\r\n//                 console.log('서버 응답:', data);\r\n//                 // 서버 응답의 값과 동기화\r\n//                 setDislike(data.hate);\r\n//                 setLike(data.love);\r\n//             })\r\n//             .catch((err) => console.error(err));\r\n//     }\r\n// }, [isDisliked, reviewId]);\r\n\r\n//   const handleLike = () => {\r\n//     // 1. 아무것도 눌려져있지 않다면 좋아요 1 올리기\r\n//     if (!isLiked && !isDisliked) {\r\n//         setLike((prev) => prev + 1);\r\n//         setIsLiked(true);\r\n//     }\r\n//     // 2. 좋아요 버튼이 이미 클릭 되어있다면 좋아요 1 내리기\r\n//     else if (isLiked) {\r\n//         setLike((prev) => prev - 1);\r\n//         setIsLiked(false);\r\n//     }\r\n//     // 3. 싫어요 버튼이 이미 클릭 되어있다면 좋아요 1 올리고 싫어요 1 내리기\r\n//     else if (isDisliked) {\r\n//         setLike((prev) => prev + 1);\r\n//         setIsLiked(true);\r\n//         setDislike((prev) => prev - 1);\r\n//         setIsDisliked(false);\r\n//     }\r\n// };\r\n\r\n// const handleDislike = () => {\r\n//     // 1. 아무것도 클릭되어있지 않다면 싫어요 1 올리기\r\n//     if (!isLiked && !isDisliked) {\r\n//         setDislike((prev) => prev + 1);\r\n//         setIsDisliked(true);\r\n//     }\r\n//     // 2. 싫어요 버튼이 이미 클릭되어있다면 싫어요 1 내리기\r\n//     else if (isDisliked) {\r\n//         setDislike((prev) => prev - 1);\r\n//         setIsDisliked(false);\r\n//     }\r\n//     // 3. 좋아요 버튼이 이미 클릭 되어있다면 싫어요 1 올리고 좋아요 1 내리기\r\n//     else if (isLiked) {\r\n//         setDislike((prev) => prev + 1);\r\n//         setIsDisliked(true);\r\n//         setLike((prev) => prev - 1);\r\n//         setIsLiked(false);\r\n//     }\r\n// };\r\n\r\n\r\n\r\n\r\n//   return (\r\n//     <div>\r\n//       <button onClick={handleLike} className=\"text-white\">\r\n//         좋아요 {like}\r\n//       </button>\r\n\r\n//       <button onClick={handleDislike} className=\"text-white\">\r\n//         싫어요 {dislike}\r\n//       </button>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nimport React, { useState } from 'react';\r\n\r\nexport default function LikeDislikeFunc({ reviewId, love, hate }) { \r\n    const [like, setLike] = useState(love);\r\n    const [dislike, setDislike] = useState(hate);\r\n    const [isLiked, setIsLiked] = useState(love > 0);\r\n    const [isDisliked, setIsDisliked] = useState(hate > 0);\r\n    const [isLoading, setIsLoading] = useState(false); // 로딩 상태 추가\r\n\r\n    const handleLike = async () => {\r\n        if (isLoading) return; // 로딩 중일 경우 함수 종료\r\n\r\n        setIsLoading(true); // 요청 시작\r\n        try {\r\n            if (!isLiked && !isDisliked) {\r\n                setLike((prev) => prev + 1);\r\n                setIsLiked(true);\r\n                await fetchLoveUpdate(1); // 서버에 좋아요 추가 요청\r\n            } else if (isLiked) {\r\n                setLike((prev) => prev - 1);\r\n                setIsLiked(false);\r\n                await fetchLoveUpdate(-1); // 서버에 좋아요 취소 요청\r\n            } else if (isDisliked) {\r\n                setLike((prev) => prev + 1);\r\n                setIsLiked(true);\r\n                setDislike((prev) => prev - 1);\r\n                setIsDisliked(false);\r\n                await fetchLoveUpdate(1); // 서버에 좋아요 추가\r\n                await fetchHateUpdate(-1); // 서버에 싫어요 취소 요청\r\n            }\r\n        } catch (error) {\r\n            console.error('좋아요 요청 오류:', error);\r\n        } finally {\r\n            setIsLoading(false); // 요청 완료\r\n        }\r\n    };\r\n\r\n    const handleDislike = async () => {\r\n        if (isLoading) return; // 로딩 중일 경우 함수 종료\r\n\r\n        setIsLoading(true); // 요청 시작\r\n        try {\r\n            if (!isLiked && !isDisliked) {\r\n                setDislike((prev) => prev + 1);\r\n                setIsDisliked(true);\r\n                await fetchHateUpdate(1); // 서버에 싫어요 추가 요청\r\n            } else if (isDisliked) {\r\n                setDislike((prev) => prev - 1);\r\n                setIsDisliked(false);\r\n                await fetchHateUpdate(-1); // 서버에 싫어요 취소 요청\r\n            } else if (isLiked) {\r\n                setDislike((prev) => prev + 1);\r\n                setIsDisliked(true);\r\n                setLike((prev) => prev - 1);\r\n                setIsLiked(false);\r\n                await fetchHateUpdate(1); // 서버에 싫어요 추가\r\n                await fetchLoveUpdate(-1); // 서버에 좋아요 취소 요청\r\n            }\r\n        } catch (error) {\r\n            console.error('싫어요 요청 오류:', error);\r\n        } finally {\r\n            setIsLoading(false); // 요청 완료\r\n        }\r\n    };\r\n\r\n    const fetchLoveUpdate = async (action) => {\r\n        const response = await fetch(`http://192.168.56.1:8080/movie/love/${reviewId}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                love: action,\r\n            }),\r\n        });\r\n        return handleResponse(response);\r\n    };\r\n\r\n    const fetchHateUpdate = async (action) => {\r\n        const response = await fetch(`http://192.168.56.1:8080/movie/hate/${reviewId}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                hate: action,\r\n            }),\r\n        });\r\n        return handleResponse(response);\r\n    };\r\n\r\n    const handleResponse = async (res) => {\r\n        if (!res.ok) {\r\n            throw new Error('Network response was not ok');\r\n        }\r\n        const data = await res.json();\r\n        console.log('서버 응답:', data);\r\n        setLike(data.love);\r\n        setDislike(data.hate);\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <button onClick={handleLike} className=\"text-white\" disabled={isLoading}>\r\n          좋아요 {like}\r\n        </button>\r\n\r\n        <button onClick={handleDislike} className=\"text-white\" disabled={isLoading}>\r\n          싫어요 {dislike}\r\n        </button>\r\n      </div>\r\n    );\r\n}\r\n\r\n\r\n"],"mappings":";;AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAC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"},"metadata":{},"sourceType":"module","externalDependencies":[]}